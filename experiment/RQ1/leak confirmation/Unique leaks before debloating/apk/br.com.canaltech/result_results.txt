Results from file: result.xml
Source Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
Source Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void count(int)>
Sink Statement: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r2, $r3, $r1)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>()
  Step 3: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r7)
  Step 4: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r7, 0, $i1)
  Step 5: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r7 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 6: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i0 = lengthof $r7
  Step 7: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: return null
  Step 8: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: virtualinvoke $r1.<com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>($r4)
  Step 9: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: r0.<com.pushwoosh.notification.PushData: android.graphics.Bitmap mCustomIconBitmap> = $r1
  Step 10: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: return
  Step 11: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 12: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: r0.<com.pushwoosh.notification.AbsNotificationFactory: com.pushwoosh.notification.PushData mPushData> = $r3
  Step 13: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>($r3)
  Step 14: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>($r3)
  Step 16: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>($r4)
  Step 17: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>
    Statement: return $r2
  Step 18: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>($r4)
  Step 19: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>
    Statement: return $r1
  Step 20: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: return $r21
  Step 21: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 22: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 23: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>($r0, $r1)
  Step 24: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory> = $r1
  Step 25: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: return
  Step 26: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 27: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 28: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 29: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: return
  Step 30: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: return
  Step 31: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: return $r0
  Step 32: 
    Method: <dummyMainClass: void dummyMainMethod(java.lang.String[])>
    Statement: staticinvoke <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>(null)
  Step 33: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>("", null)
  Step 34: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>($r3, $r2)
  Step 35: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 36: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>()
  Step 37: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: r0 = <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory>
  Step 38: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: return r0
  Step 39: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: if $r1 == null goto $r2 = staticinvoke <com.pushwoosh.internal.utils.NotificationPrefs: java.lang.String getNotificationFactoryClassName(android.content.Context)>($r0)
  Step 40: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = (com.pushwoosh.notification.AbsNotificationFactory) $r4
  Step 41: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 42: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 43: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>($r5)
  Step 44: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: $r2 = r0.<com.pushwoosh.notification.AbsNotificationFactory: android.content.Context mContext>
  Step 45: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>($r2, $i1)
  Step 46: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>($r0)
  Step 47: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>($r0)
  Step 48: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: specialinvoke $r8.<com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>($r0)
  Step 49: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>
    Statement: specialinvoke r0.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>($r1)
  Step 50: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>
    Statement: r0.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: android.content.Context mContext> = $r1
  Step 51: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>
    Statement: return
  Step 52: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>
    Statement: return
  Step 53: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger mShortcutBadger> = $r8
  Step 54: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: return $r1
  Step 55: 
    Method: <com.pushwoosh.internal.request.RequestManager: void sendRequest(android.content.Context,com.pushwoosh.internal.request.PushRequest)>
    Statement: throw $r5
  Step 56: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: return
  Step 57: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 58: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: return
  Step 59: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: return
  Step 60: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>("", null)
  Step 61: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>($r3, $r2)
  Step 62: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 63: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>($r5)
  Step 64: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>($r2, $i1)
  Step 65: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>($r0)
  Step 66: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>($r0)
  Step 67: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger mShortcutBadger>
  Step 68: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: if $r1 == null goto $r2 = <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: java.lang.String LOG_TAG>
  Step 69: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger mShortcutBadger>
  Step 70: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: return $r1
  Step 71: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: return $r1
  Step 72: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: virtualinvoke $r1.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void count(int)>($i0)
  Step 73: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void count(int)>
    Statement: virtualinvoke r0.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void executeBadge(int)>($i0)
  Step 74: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void executeBadge(int)>
    Statement: return
  Step 75: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void count(int)>
    Statement: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r2, $r3, $r1)

==================================================
Source Method: <br.com.canaltech.json_utils.JSONFetcher: java.lang.String fetch(java.lang.String)>
Source Statement: $r4 = virtualinvoke r3.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <br.com.canaltech.json_utils.JSONFetcher: java.lang.String fetch(java.lang.String)>
Sink Statement: virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i0)
Taint Path:
  Step 1: 
    Method: <br.com.canaltech.json_utils.JSONFetcher: java.lang.String fetch(java.lang.String)>
    Statement: $r4 = virtualinvoke r3.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <br.com.canaltech.json_utils.JSONFetcher: java.lang.String fetch(java.lang.String)>
    Statement: r5 = (java.net.HttpURLConnection) $r4
  Step 3: 
    Method: <br.com.canaltech.json_utils.JSONFetcher: java.lang.String fetch(java.lang.String)>
    Statement: $r6 = virtualinvoke r5.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
  Step 4: 
    Method: <br.com.canaltech.json_utils.JSONFetcher: java.lang.String fetch(java.lang.String)>
    Statement: $i0 = virtualinvoke $r6.<java.io.InputStream: int read(byte[])>(r1)
  Step 5: 
    Method: <br.com.canaltech.json_utils.JSONFetcher: java.lang.String fetch(java.lang.String)>
    Statement: virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i0)

==================================================
Source Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
Source Statement: $r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r0, 0, $r5, 268435456)
Sink Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
Sink Statement: virtualinvoke r0.<com.pushwoosh.location.GeoLocationService: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r7, $r8)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: $r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r0, 0, $r5, 268435456)
  Step 2: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: r0.<com.pushwoosh.location.GeoLocationService: android.app.PendingIntent singleUpdatePI> = $r6
  Step 3: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: virtualinvoke r0.<com.pushwoosh.location.GeoLocationService: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r7, $r8)

==================================================
Source Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
Source Statement: $r4 = virtualinvoke $r3.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
Sink Statement: virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r9, 0, $i0)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: $r5 = (java.net.HttpURLConnection) $r4
  Step 3: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: $r6 = virtualinvoke $r5.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
  Step 4: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: $i0 = virtualinvoke $r6.<java.io.InputStream: int read(byte[])>($r9)
  Step 5: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r9, 0, $i0)
  Step 6: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r9, 0, $i0)

==================================================
Source Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
Source Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.internal.PushServiceHelper: void generateBroadcast(android.content.Context,android.os.Bundle,java.lang.String)>
Sink Statement: virtualinvoke $r0.<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>($r3, $r2)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>()
  Step 3: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r7)
  Step 4: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r7, 0, $i1)
  Step 5: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r7 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 6: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = lengthof $r7
  Step 7: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: return null
  Step 8: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: virtualinvoke $r1.<com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>($r4)
  Step 9: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: r0.<com.pushwoosh.notification.PushData: android.graphics.Bitmap mCustomIconBitmap> = $r1
  Step 10: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: return
  Step 11: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 12: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: r0.<com.pushwoosh.notification.AbsNotificationFactory: com.pushwoosh.notification.PushData mPushData> = $r3
  Step 13: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>($r3)
  Step 14: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: $r3 = r0.<com.pushwoosh.notification.AbsNotificationFactory: com.pushwoosh.notification.PushData mPushData>
  Step 16: 
    Method: <com.pushwoosh.notification.PushData: int getVisibility()>
    Statement: return i0
  Step 17: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $i0 = virtualinvoke $r1.<com.pushwoosh.notification.PushData: int getVisibility()>()
  Step 18: 
    Method: <com.pushwoosh.notification.PushData: int getVisibility()>
    Statement: return i0
  Step 19: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $i0 = virtualinvoke $r1.<com.pushwoosh.notification.PushData: int getSmallIconResId()>()
  Step 20: 
    Method: <com.pushwoosh.notification.PushData: int getSmallIconResId()>
    Statement: return i0
  Step 21: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: r0 := @this: com.pushwoosh.notification.DefaultNotificationFactory
  Step 22: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: $r3 = r0.<com.pushwoosh.notification.AbsNotificationFactory: com.pushwoosh.notification.PushData mPushData>
  Step 23: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>($r3)
  Step 24: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: return $r21
  Step 25: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 26: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 27: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>($r0, $r1)
  Step 28: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory> = $r1
  Step 29: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: return
  Step 30: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 31: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 32: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 33: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: return
  Step 34: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: return
  Step 35: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: return $r0
  Step 36: 
    Method: <dummyMainClass: void dummyMainMethod(java.lang.String[])>
    Statement: staticinvoke <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>(null)
  Step 37: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>("", null)
  Step 38: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>($r3, $r2)
  Step 39: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 40: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>()
  Step 41: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: r0 = <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory>
  Step 42: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: return r0
  Step 43: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: if $r1 == null goto $r2 = staticinvoke <com.pushwoosh.internal.utils.NotificationPrefs: java.lang.String getNotificationFactoryClassName(android.content.Context)>($r0)
  Step 44: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = (com.pushwoosh.notification.AbsNotificationFactory) $r4
  Step 45: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 46: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 47: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>($r5)
  Step 48: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void sendDeliveryRequestInternal(boolean)>($z0)
  Step 49: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void sendDeliveryRequestInternal(boolean)>
    Statement: virtualinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void onSendDeliveryRequest(boolean,com.pushwoosh.notification.PushData)>($z0, $r3)
  Step 50: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: void onSendDeliveryRequest(boolean,com.pushwoosh.notification.PushData)>
    Statement: return
  Step 51: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void sendDeliveryRequestInternal(boolean)>
    Statement: return
  Step 52: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: return
  Step 53: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 54: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 55: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>($r5)
  Step 56: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: $r3 = r0.<com.pushwoosh.notification.AbsNotificationFactory: com.pushwoosh.notification.PushData mPushData>
  Step 57: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: $z0 = virtualinvoke $r3.<com.pushwoosh.notification.PushData: boolean isSilent()>()
  Step 58: 
    Method: <com.pushwoosh.notification.PushData: boolean isSilent()>
    Statement: z0 = r0.<com.pushwoosh.notification.PushData: boolean mSilent>
  Step 59: 
    Method: <com.pushwoosh.notification.PushData: boolean isSilent()>
    Statement: return z0
  Step 60: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: if $z0 != 0 goto $r2 = r0.<com.pushwoosh.notification.AbsNotificationFactory: android.content.Context mContext>
  Step 61: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateBroadcast(android.content.Context,android.os.Bundle,java.lang.String)>($r2, $r8, $r11)
  Step 62: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateBroadcast(android.content.Context,android.os.Bundle,java.lang.String)>
    Statement: $z0 = staticinvoke <com.pushwoosh.internal.utils.GeneralUtils: boolean isAmazonDevice()>()
  Step 63: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: boolean isAmazonDevice()>
    Statement: return 1
  Step 64: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateBroadcast(android.content.Context,android.os.Bundle,java.lang.String)>
    Statement: if $z0 == 0 goto $r5 = new java.lang.StringBuilder
  Step 65: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateBroadcast(android.content.Context,android.os.Bundle,java.lang.String)>
    Statement: virtualinvoke $r0.<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>($r3, $r2)

==================================================
Source Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Source Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
Sink Statement: $r4 = virtualinvoke $r3.<java.net.URL: java.net.URLConnection openConnection()>()
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r10 = (java.net.HttpURLConnection) $r9
  Step 3: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r17 = virtualinvoke $r10.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
  Step 4: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r17)
  Step 5: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r16.<java.io.InputStream: int read(byte[])>($r13)
  Step 6: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r18.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r13, 0, $i0)
  Step 7: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r13 = virtualinvoke $r18.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 8: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r13)
  Step 9: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>()
  Step 10: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r11.<org.json.JSONObject: void <init>(java.lang.String)>($r2)
  Step 11: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r11.<org.json.JSONObject: int getInt(java.lang.String)>("status_code")
  Step 12: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r3.<com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>($i0)
  Step 13: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode> = $i0
  Step 14: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: return $r3
  Step 16: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $i1 = virtualinvoke $r7.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>()
  Step 17: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: i0 = r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode>
  Step 18: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: return i0
  Step 19: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: if 200 == $i1 goto $r3 = new java.lang.StringBuilder
  Step 20: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: virtualinvoke $r2.<com.pushwoosh.internal.request.PushRequest: void parseResponse(org.json.JSONObject)>($r8)
  Step 21: 
    Method: <com.pushwoosh.internal.request.GetPageRequest: void parseResponse(org.json.JSONObject)>
    Statement: r0.<com.pushwoosh.internal.request.GetPageRequest: java.lang.String templateId> = $r3
  Step 22: 
    Method: <com.pushwoosh.internal.request.GetPageRequest: void parseResponse(org.json.JSONObject)>
    Statement: return
  Step 23: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: return $r8
  Step 24: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r3 = virtualinvoke $r2.<com.pushwoosh.internal.request.GetPageRequest: java.lang.String getTemplateId()>()
  Step 25: 
    Method: <com.pushwoosh.internal.request.GetPageRequest: java.lang.String getTemplateId()>
    Statement: r1 = r0.<com.pushwoosh.internal.request.GetPageRequest: java.lang.String templateId>
  Step 26: 
    Method: <com.pushwoosh.internal.request.GetPageRequest: java.lang.String getTemplateId()>
    Statement: return r1
  Step 27: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
  Step 28: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml")
  Step 29: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
  Step 30: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: specialinvoke $r7.<com.pushwoosh.richpages.WebLayout: void <init>(java.lang.String)>($r3)
  Step 31: 
    Method: <com.pushwoosh.richpages.WebLayout: void <init>(java.lang.String)>
    Statement: r0.<com.pushwoosh.richpages.WebLayout: java.lang.String url> = $r1
  Step 32: 
    Method: <com.pushwoosh.richpages.WebLayout: void <init>(java.lang.String)>
    Statement: return
  Step 33: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r8 = virtualinvoke $r7.<com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>($r4)
  Step 34: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r2 = r0.<com.pushwoosh.richpages.WebLayout: java.lang.String url>
  Step 35: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r4 = virtualinvoke $r3.<com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>($r2)
  Step 36: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>
    Statement: specialinvoke r0.<com.pushwoosh.richpages.LayoutCache: void cacheBitmapToMemory(java.lang.String,byte[])>($r1, $r2)
  Step 37: 
    Method: <com.pushwoosh.richpages.LayoutCache: void cacheBitmapToMemory(java.lang.String,byte[])>
    Statement: virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4)
  Step 38: 
    Method: <com.pushwoosh.richpages.LayoutCache: void cacheBitmapToMemory(java.lang.String,byte[])>
    Statement: $r3 = r0.<com.pushwoosh.richpages.LayoutCache: java.util.concurrent.ConcurrentHashMap memoryCache>
  Step 39: 
    Method: <com.pushwoosh.richpages.LayoutCache: void cacheBitmapToMemory(java.lang.String,byte[])>
    Statement: r0 := @this: com.pushwoosh.richpages.LayoutCache
  Step 40: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>
    Statement: return $r2
  Step 41: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r3 = <com.pushwoosh.richpages.WebLayout: com.pushwoosh.richpages.LayoutCache layoutCache>
  Step 42: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: return $r4
  Step 43: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: return null
  Step 44: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Object doInBackground(java.lang.Object[])>
    Statement: return $r1
  Step 45: 
    Method: <com.pushwoosh.richpages.RichPageActivity: void setRichPushContentView(java.lang.String)>
    Statement: return
  Step 46: 
    Method: <com.pushwoosh.richpages.RichPageActivity: void onCreate(android.os.Bundle)>
    Statement: return
  Step 47: 
    Method: <dummyMainClass: com.pushwoosh.richpages.RichPageActivity dummyMainMethod_com_pushwoosh_richpages_RichPageActivity(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.richpages.RichPageActivity: void onCreate(android.os.Bundle)>(null)
  Step 48: 
    Method: <com.pushwoosh.richpages.RichPageActivity: void onCreate(android.os.Bundle)>
    Statement: specialinvoke r0.<com.pushwoosh.richpages.RichPageActivity: void setRichPushContentView(java.lang.String)>($r3)
  Step 49: 
    Method: <com.pushwoosh.richpages.RichPageActivity: void setRichPushContentView(java.lang.String)>
    Statement: virtualinvoke $r5.<com.pushwoosh.richpages.RichPageActivity$GetPageTask: android.os.AsyncTask execute(java.lang.Object[])>($r6)
  Step 50: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Object doInBackground(java.lang.Object[])>
    Statement: $r1 = virtualinvoke r0.<com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>($r3)
  Step 51: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r8 = virtualinvoke $r7.<com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>($r4)
  Step 52: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r3 = <com.pushwoosh.richpages.WebLayout: com.pushwoosh.richpages.LayoutCache layoutCache>
  Step 53: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: if $r3 != null goto $r2 = r0.<com.pushwoosh.richpages.WebLayout: java.lang.String url>
  Step 54: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: <com.pushwoosh.richpages.WebLayout: com.pushwoosh.richpages.LayoutCache layoutCache> = $r3
  Step 55: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r3 = <com.pushwoosh.richpages.WebLayout: com.pushwoosh.richpages.LayoutCache layoutCache>
  Step 56: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r4 = virtualinvoke $r3.<com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>($r2)
  Step 57: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>
    Statement: $r2 = specialinvoke r0.<com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>($r1)
  Step 58: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>
    Statement: $z0 = r0.<com.pushwoosh.richpages.LayoutCache: boolean diskCacheEnabled>
  Step 59: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>
    Statement: if $z0 == 0 goto return null
  Step 60: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>
    Statement: return null
  Step 61: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>
    Statement: return $r2
  Step 62: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: if $r4 != null goto return $r4
  Step 63: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r2 = r0.<com.pushwoosh.richpages.WebLayout: java.lang.String url>
  Step 64: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r4 = specialinvoke r0.<com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>($r2)
  Step 65: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: specialinvoke $r21.<java.net.URL: void <init>(java.lang.String)>($r1)
  Step 66: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: $r3 = $r21
  Step 67: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URL: java.net.URLConnection openConnection()>()

==================================================
Source Method: <com.squareup.picasso.Dispatcher: void dispatchSubmit(com.squareup.picasso.Action)>
Source Statement: $r3 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r1)
Sink Method: <com.squareup.picasso.Dispatcher: void dispatchSubmit(com.squareup.picasso.Action)>
Sink Statement: virtualinvoke $r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r3)
Taint Path:
  Step 1: 
    Method: <com.squareup.picasso.Dispatcher: void dispatchSubmit(com.squareup.picasso.Action)>
    Statement: $r3 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r1)
  Step 2: 
    Method: <com.squareup.picasso.Dispatcher: void dispatchSubmit(com.squareup.picasso.Action)>
    Statement: virtualinvoke $r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r3)

==================================================
Source Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
Source Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
Sink Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Sink Statement: virtualinvoke $r14.<java.io.OutputStream: void write(byte[])>($r13)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: return $r2
  Step 3: 
    Method: <com.pushwoosh.internal.request.PushRequest: java.util.Map getParams(android.content.Context)>
    Statement: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hwid", $r3)
  Step 4: 
    Method: <com.pushwoosh.internal.request.PushRequest: java.util.Map getParams(android.content.Context)>
    Statement: return $r2
  Step 5: 
    Method: <com.pushwoosh.PushManager: void registerUserInternal(android.content.Context,java.lang.String)>
    Statement: $r4 = staticinvoke <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>($r0, $r3, $r2)
  Step 6: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r7 = staticinvoke <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>($r0, $r1, $r4)
  Step 7: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r12 = staticinvoke <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>($r1)
  Step 8: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: if $r0 != null goto $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>()
  Step 9: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: $r1 = new org.json.JSONObject
  Step 10: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: return $r1
  Step 11: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r11.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("request", $r12)
  Step 12: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r2 = virtualinvoke $r11.<org.json.JSONObject: java.lang.String toString()>()
  Step 13: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r13 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>()
  Step 14: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r14.<java.io.OutputStream: void write(byte[])>($r13)

==================================================
Source Method: <com.squareup.picasso.Dispatcher: void dispatchNetworkStateChange(android.net.NetworkInfo)>
Source Statement: $r3 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(9, $r1)
Sink Method: <com.squareup.picasso.Dispatcher: void dispatchNetworkStateChange(android.net.NetworkInfo)>
Sink Statement: virtualinvoke $r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r3)
Taint Path:
  Step 1: 
    Method: <com.squareup.picasso.Dispatcher: void dispatchNetworkStateChange(android.net.NetworkInfo)>
    Statement: $r3 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(9, $r1)
  Step 2: 
    Method: <com.squareup.picasso.Dispatcher: void dispatchNetworkStateChange(android.net.NetworkInfo)>
    Statement: virtualinvoke $r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r3)

==================================================
Source Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
Source Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.DefaultBadger: void executeBadge(int)>
Sink Statement: virtualinvoke $r3.<android.content.Context: void sendBroadcast(android.content.Intent)>($r1)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>()
  Step 3: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r7)
  Step 4: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r7, 0, $i1)
  Step 5: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r7 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 6: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i0 = lengthof $r7
  Step 7: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: return null
  Step 8: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: virtualinvoke $r1.<com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>($r4)
  Step 9: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: r0.<com.pushwoosh.notification.PushData: android.graphics.Bitmap mCustomIconBitmap> = $r1
  Step 10: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: return
  Step 11: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 12: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: r0.<com.pushwoosh.notification.AbsNotificationFactory: com.pushwoosh.notification.PushData mPushData> = $r3
  Step 13: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>($r3)
  Step 14: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>($r3)
  Step 16: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>($r4)
  Step 17: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>
    Statement: return $r1
  Step 18: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>($r4)
  Step 19: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>
    Statement: return $r1
  Step 20: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: return $r21
  Step 21: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 22: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 23: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>($r0, $r1)
  Step 24: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory> = $r1
  Step 25: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: return
  Step 26: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 27: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 28: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 29: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: return
  Step 30: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: return
  Step 31: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>("", null)
  Step 32: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>($r3, $r2)
  Step 33: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 34: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>()
  Step 35: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: r0 = <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory>
  Step 36: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: return r0
  Step 37: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: if $r1 == null goto $r2 = staticinvoke <com.pushwoosh.internal.utils.NotificationPrefs: java.lang.String getNotificationFactoryClassName(android.content.Context)>($r0)
  Step 38: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = (com.pushwoosh.notification.AbsNotificationFactory) $r4
  Step 39: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 40: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 41: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>($r5)
  Step 42: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: $r2 = r0.<com.pushwoosh.notification.AbsNotificationFactory: android.content.Context mContext>
  Step 43: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>($r2, $i1)
  Step 44: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>($r0)
  Step 45: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>($r0)
  Step 46: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: specialinvoke $r8.<com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>($r0)
  Step 47: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>
    Statement: specialinvoke r0.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>($r1)
  Step 48: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>
    Statement: r0.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: android.content.Context mContext> = $r1
  Step 49: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>
    Statement: return
  Step 50: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>
    Statement: return
  Step 51: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger mShortcutBadger> = $r8
  Step 52: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: return $r1
  Step 53: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: return $r1
  Step 54: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: return
  Step 55: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: return
  Step 56: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 57: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: return
  Step 58: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: return
  Step 59: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>("", null)
  Step 60: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>($r3, $r2)
  Step 61: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 62: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>($r5)
  Step 63: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>($r2, $i1)
  Step 64: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>($r0)
  Step 65: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>($r0)
  Step 66: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger mShortcutBadger>
  Step 67: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: if $r1 == null goto $r2 = <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: java.lang.String LOG_TAG>
  Step 68: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger mShortcutBadger>
  Step 69: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: return $r1
  Step 70: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: return $r1
  Step 71: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: virtualinvoke $r1.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void count(int)>($i0)
  Step 72: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void count(int)>
    Statement: virtualinvoke r0.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void executeBadge(int)>($i0)
  Step 73: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.DefaultBadger: void executeBadge(int)>
    Statement: virtualinvoke $r3.<android.content.Context: void sendBroadcast(android.content.Intent)>($r1)

==================================================
Source Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Source Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
Sink Statement: virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r9, 0, $i0)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r10 = (java.net.HttpURLConnection) $r9
  Step 3: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r17 = virtualinvoke $r10.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
  Step 4: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r17)
  Step 5: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r16.<java.io.InputStream: int read(byte[])>($r13)
  Step 6: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r18.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r13, 0, $i0)
  Step 7: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r13 = virtualinvoke $r18.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 8: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r13)
  Step 9: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>()
  Step 10: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r11.<org.json.JSONObject: void <init>(java.lang.String)>($r2)
  Step 11: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r11.<org.json.JSONObject: int getInt(java.lang.String)>("status_code")
  Step 12: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r3.<com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>($i0)
  Step 13: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode> = $i0
  Step 14: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: return $r3
  Step 16: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $i1 = virtualinvoke $r7.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>()
  Step 17: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: i0 = r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode>
  Step 18: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: return i0
  Step 19: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: if 200 == $i1 goto $r3 = new java.lang.StringBuilder
  Step 20: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: virtualinvoke $r2.<com.pushwoosh.internal.request.PushRequest: void parseResponse(org.json.JSONObject)>($r8)
  Step 21: 
    Method: <com.pushwoosh.internal.request.GetPageRequest: void parseResponse(org.json.JSONObject)>
    Statement: r0.<com.pushwoosh.internal.request.GetPageRequest: java.lang.String templateId> = $r3
  Step 22: 
    Method: <com.pushwoosh.internal.request.GetPageRequest: void parseResponse(org.json.JSONObject)>
    Statement: return
  Step 23: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: return $r8
  Step 24: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r3 = virtualinvoke $r2.<com.pushwoosh.internal.request.GetPageRequest: java.lang.String getTemplateId()>()
  Step 25: 
    Method: <com.pushwoosh.internal.request.GetPageRequest: java.lang.String getTemplateId()>
    Statement: r1 = r0.<com.pushwoosh.internal.request.GetPageRequest: java.lang.String templateId>
  Step 26: 
    Method: <com.pushwoosh.internal.request.GetPageRequest: java.lang.String getTemplateId()>
    Statement: return r1
  Step 27: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
  Step 28: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml")
  Step 29: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
  Step 30: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: specialinvoke $r7.<com.pushwoosh.richpages.WebLayout: void <init>(java.lang.String)>($r3)
  Step 31: 
    Method: <com.pushwoosh.richpages.WebLayout: void <init>(java.lang.String)>
    Statement: r0.<com.pushwoosh.richpages.WebLayout: java.lang.String url> = $r1
  Step 32: 
    Method: <com.pushwoosh.richpages.WebLayout: void <init>(java.lang.String)>
    Statement: return
  Step 33: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r8 = virtualinvoke $r7.<com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>($r4)
  Step 34: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r2 = r0.<com.pushwoosh.richpages.WebLayout: java.lang.String url>
  Step 35: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r4 = virtualinvoke $r3.<com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>($r2)
  Step 36: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>
    Statement: specialinvoke r0.<com.pushwoosh.richpages.LayoutCache: void cacheBitmapToMemory(java.lang.String,byte[])>($r1, $r2)
  Step 37: 
    Method: <com.pushwoosh.richpages.LayoutCache: void cacheBitmapToMemory(java.lang.String,byte[])>
    Statement: virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4)
  Step 38: 
    Method: <com.pushwoosh.richpages.LayoutCache: void cacheBitmapToMemory(java.lang.String,byte[])>
    Statement: $r3 = r0.<com.pushwoosh.richpages.LayoutCache: java.util.concurrent.ConcurrentHashMap memoryCache>
  Step 39: 
    Method: <com.pushwoosh.richpages.LayoutCache: void cacheBitmapToMemory(java.lang.String,byte[])>
    Statement: r0 := @this: com.pushwoosh.richpages.LayoutCache
  Step 40: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>
    Statement: return $r2
  Step 41: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r3 = <com.pushwoosh.richpages.WebLayout: com.pushwoosh.richpages.LayoutCache layoutCache>
  Step 42: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: return $r4
  Step 43: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: return null
  Step 44: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Object doInBackground(java.lang.Object[])>
    Statement: return $r1
  Step 45: 
    Method: <com.pushwoosh.richpages.RichPageActivity: void setRichPushContentView(java.lang.String)>
    Statement: return
  Step 46: 
    Method: <com.pushwoosh.richpages.RichPageActivity: void onCreate(android.os.Bundle)>
    Statement: return
  Step 47: 
    Method: <dummyMainClass: com.pushwoosh.richpages.RichPageActivity dummyMainMethod_com_pushwoosh_richpages_RichPageActivity(android.content.Intent)>
    Statement: return $r0
  Step 48: 
    Method: <dummyMainClass: void dummyMainMethod(java.lang.String[])>
    Statement: staticinvoke <dummyMainClass: com.pushwoosh.richpages.RichPageActivity dummyMainMethod_com_pushwoosh_richpages_RichPageActivity(android.content.Intent)>(null)
  Step 49: 
    Method: <dummyMainClass: com.pushwoosh.richpages.RichPageActivity dummyMainMethod_com_pushwoosh_richpages_RichPageActivity(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.richpages.RichPageActivity: void onCreate(android.os.Bundle)>(null)
  Step 50: 
    Method: <com.pushwoosh.richpages.RichPageActivity: void onCreate(android.os.Bundle)>
    Statement: specialinvoke r0.<com.pushwoosh.richpages.RichPageActivity: void setRichPushContentView(java.lang.String)>($r3)
  Step 51: 
    Method: <com.pushwoosh.richpages.RichPageActivity: void setRichPushContentView(java.lang.String)>
    Statement: virtualinvoke $r5.<com.pushwoosh.richpages.RichPageActivity$GetPageTask: android.os.AsyncTask execute(java.lang.Object[])>($r6)
  Step 52: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Object doInBackground(java.lang.Object[])>
    Statement: $r1 = virtualinvoke r0.<com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>($r3)
  Step 53: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r8 = virtualinvoke $r7.<com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>($r4)
  Step 54: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r3 = <com.pushwoosh.richpages.WebLayout: com.pushwoosh.richpages.LayoutCache layoutCache>
  Step 55: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: if $r3 != null goto $r2 = r0.<com.pushwoosh.richpages.WebLayout: java.lang.String url>
  Step 56: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: <com.pushwoosh.richpages.WebLayout: com.pushwoosh.richpages.LayoutCache layoutCache> = $r3
  Step 57: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r3 = <com.pushwoosh.richpages.WebLayout: com.pushwoosh.richpages.LayoutCache layoutCache>
  Step 58: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r4 = virtualinvoke $r3.<com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>($r2)
  Step 59: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>
    Statement: $r2 = specialinvoke r0.<com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>($r1)
  Step 60: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>
    Statement: $z0 = r0.<com.pushwoosh.richpages.LayoutCache: boolean diskCacheEnabled>
  Step 61: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>
    Statement: if $z0 == 0 goto return null
  Step 62: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>
    Statement: return null
  Step 63: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>
    Statement: return $r2
  Step 64: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: if $r4 != null goto return $r4
  Step 65: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r4 = specialinvoke r0.<com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>($r2)
  Step 66: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r9, 0, $i0)

==================================================
Source Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
Source Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
Sink Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Sink Statement: virtualinvoke $r10.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Content-Length", $r2)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: return $r2
  Step 3: 
    Method: <com.pushwoosh.internal.request.PushRequest: java.util.Map getParams(android.content.Context)>
    Statement: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hwid", $r3)
  Step 4: 
    Method: <com.pushwoosh.internal.request.PushRequest: java.util.Map getParams(android.content.Context)>
    Statement: return $r2
  Step 5: 
    Method: <com.pushwoosh.PushManager: void registerUserInternal(android.content.Context,java.lang.String)>
    Statement: $r4 = staticinvoke <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>($r0, $r3, $r2)
  Step 6: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r7 = staticinvoke <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>($r0, $r1, $r4)
  Step 7: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r12 = staticinvoke <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>($r1)
  Step 8: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: if $r0 != null goto $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>()
  Step 9: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: $r1 = new org.json.JSONObject
  Step 10: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: return $r1
  Step 11: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r11.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("request", $r12)
  Step 12: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r2 = virtualinvoke $r11.<org.json.JSONObject: java.lang.String toString()>()
  Step 13: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r10.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Content-Length", $r2)

==================================================
Source Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
Source Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
Sink Method: <com.pushwoosh.internal.utils.NotificationPrefs: void setBaseUrl(android.content.Context,java.lang.String)>
Sink Statement: interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("pw_base_url", $r1)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: return $r2
  Step 3: 
    Method: <com.pushwoosh.internal.request.PushRequest: java.util.Map getParams(android.content.Context)>
    Statement: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hwid", $r3)
  Step 4: 
    Method: <com.pushwoosh.internal.request.PushRequest: java.util.Map getParams(android.content.Context)>
    Statement: return $r2
  Step 5: 
    Method: <com.pushwoosh.PushManager: void registerUserInternal(android.content.Context,java.lang.String)>
    Statement: $r4 = staticinvoke <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>($r0, $r3, $r2)
  Step 6: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r7 = staticinvoke <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>($r0, $r1, $r4)
  Step 7: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r12 = staticinvoke <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>($r1)
  Step 8: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: if $r0 != null goto $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>()
  Step 9: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: $r6 = (java.lang.String) $r4
  Step 10: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r6, $r4)
  Step 11: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: return $r1
  Step 12: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r11.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("request", $r12)
  Step 13: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r2 = virtualinvoke $r11.<org.json.JSONObject: java.lang.String toString()>()
  Step 14: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r13 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>()
  Step 15: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = lengthof $r13
  Step 16: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: staticinvoke <com.pushwoosh.internal.utils.NotificationPrefs: void setBaseUrl(android.content.Context,java.lang.String)>($r0, $r2)
  Step 17: 
    Method: <com.pushwoosh.internal.utils.NotificationPrefs: void setBaseUrl(android.content.Context,java.lang.String)>
    Statement: interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("pw_base_url", $r1)

==================================================
Source Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
Source Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
Sink Method: <com.pushwoosh.internal.utils.RegistrationPrefs: void setApplicationId(android.content.Context,java.lang.String)>
Sink Statement: interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("application_id", $r1)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: return $r2
  Step 3: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: virtualinvoke r0.<com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>($r1, $r4)
  Step 4: 
    Method: <com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>
    Statement: r0.<com.pushwoosh.PushManager: java.lang.String currentUserId> = $r2
  Step 5: 
    Method: <com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>
    Statement: return
  Step 6: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: return
  Step 7: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance> = $r1
  Step 8: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 9: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 10: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void registerForPushNotifications()>()
  Step 11: 
    Method: <com.pushwoosh.PushManager: void registerForPushNotifications()>
    Statement: return
  Step 12: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void registerForPushNotifications()>()
  Step 13: 
    Method: <com.pushwoosh.PushManager: void registerForPushNotifications()>
    Statement: return
  Step 14: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void onStartup(android.content.Context)>($r2)
  Step 15: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: specialinvoke r0.<com.pushwoosh.PushManager: void sendAppOpen(android.content.Context)>($r1)
  Step 16: 
    Method: <com.pushwoosh.PushManager: void sendAppOpen(android.content.Context)>
    Statement: return
  Step 17: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: r0 := @this: com.pushwoosh.PushManager
  Step 18: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 19: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 20: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 21: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 22: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 23: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 24: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 25: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void onStartup(android.content.Context)>($r2)
  Step 26: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: specialinvoke r0.<com.pushwoosh.PushManager: void sendAppOpen(android.content.Context)>($r1)
  Step 27: 
    Method: <com.pushwoosh.PushManager: void sendAppOpen(android.content.Context)>
    Statement: return
  Step 28: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: return
  Step 29: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void onStartup(android.content.Context)>($r2)
  Step 30: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: return
  Step 31: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 32: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 33: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 34: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 35: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 36: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 37: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 38: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void onStartup(android.content.Context)>($r2)
  Step 39: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: return
  Step 40: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void registerForPushNotifications()>()
  Step 41: 
    Method: <com.pushwoosh.PushManager: void registerForPushNotifications()>
    Statement: return
  Step 42: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 43: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 44: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 45: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 46: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: return
  Step 47: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: return
  Step 48: 
    Method: <br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>
    Statement: return
  Step 49: 
    Method: <dummyMainClass: br.com.canaltech.view.MainActivity dummyMainMethod_br_com_canaltech_view_MainActivity(android.content.Intent)>
    Statement: virtualinvoke $r0.<br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>(null)
  Step 50: 
    Method: <br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>
    Statement: specialinvoke r0.<br.com.canaltech.view.MainActivity: void configurarPushWoosh()>()
  Step 51: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: return
  Step 52: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: return
  Step 53: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: return
  Step 54: 
    Method: <br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>
    Statement: return
  Step 55: 
    Method: <dummyMainClass: br.com.canaltech.view.MainActivity dummyMainMethod_br_com_canaltech_view_MainActivity(android.content.Intent)>
    Statement: virtualinvoke $r0.<br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>(null)
  Step 56: 
    Method: <br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>
    Statement: specialinvoke r0.<br.com.canaltech.view.MainActivity: void configurarPushWoosh()>()
  Step 57: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: virtualinvoke $r3.<br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>()
  Step 58: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 59: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 60: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: if $r1 != null goto $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 61: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: specialinvoke $r1.<com.pushwoosh.PushManager: void <init>(android.content.Context)>($r0)
  Step 62: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: r0.<com.pushwoosh.PushManager: android.content.Context mContext> = $r1
  Step 63: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: virtualinvoke r0.<com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>($r1, $r4)
  Step 64: 
    Method: <com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>
    Statement: specialinvoke $r4.<com.pushwoosh.PushManager$1: void <init>(com.pushwoosh.PushManager,android.content.Context,java.lang.String)>(r0, $r1, $r2)
  Step 65: 
    Method: <com.pushwoosh.PushManager$1: void <init>(com.pushwoosh.PushManager,android.content.Context,java.lang.String)>
    Statement: return
  Step 66: 
    Method: <com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>
    Statement: r0 := @this: com.pushwoosh.PushManager
  Step 67: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: r0.<com.pushwoosh.PushManager: android.content.Context mContext> = $r1
  Step 68: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: return
  Step 69: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 70: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r2 = r0.<br.com.canaltech.model.pushwoosh.CorePushWoosh: android.content.Context context>
  Step 71: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: r0 := @this: br.com.canaltech.model.pushwoosh.CorePushWoosh
  Step 72: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: $r3 = r0.<br.com.canaltech.view.MainActivity: br.com.canaltech.model.pushwoosh.CorePushWoosh corePushWoosh>
  Step 73: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: return
  Step 74: 
    Method: <br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>
    Statement: specialinvoke r0.<br.com.canaltech.view.MainActivity: void configurarPushWoosh()>()
  Step 75: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: specialinvoke $r3.<br.com.canaltech.model.pushwoosh.CorePushWoosh: void <init>(android.content.Context,android.app.Activity)>($r4, r0)
  Step 76: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void <init>(android.content.Context,android.app.Activity)>
    Statement: r0.<br.com.canaltech.model.pushwoosh.CorePushWoosh: android.app.Activity activity> = $r2
  Step 77: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void <init>(android.content.Context,android.app.Activity)>
    Statement: return
  Step 78: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: r0.<br.com.canaltech.view.MainActivity: br.com.canaltech.model.pushwoosh.CorePushWoosh corePushWoosh> = $r3
  Step 79: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: $r3 = r0.<br.com.canaltech.view.MainActivity: br.com.canaltech.model.pushwoosh.CorePushWoosh corePushWoosh>
  Step 80: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: virtualinvoke $r3.<br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>()
  Step 81: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r2 = r0.<br.com.canaltech.model.pushwoosh.CorePushWoosh: android.content.Context context>
  Step 82: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 83: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: specialinvoke $r1.<com.pushwoosh.PushManager: void <init>(android.content.Context)>($r0)
  Step 84: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: r0.<com.pushwoosh.PushManager: android.content.Context mContext> = $r1
  Step 85: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: return
  Step 86: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance> = $r1
  Step 87: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 88: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: return
  Step 89: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: return
  Step 90: 
    Method: <br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>
    Statement: specialinvoke r0.<br.com.canaltech.view.MainActivity: void configurarPushWoosh()>()
  Step 91: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: virtualinvoke $r3.<br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>()
  Step 92: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 93: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 94: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: if $r1 != null goto $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 95: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: staticinvoke <com.pushwoosh.internal.utils.RegistrationPrefs: void setApplicationId(android.content.Context,java.lang.String)>($r0, $r3)
  Step 96: 
    Method: <com.pushwoosh.internal.utils.RegistrationPrefs: void setApplicationId(android.content.Context,java.lang.String)>
    Statement: interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("application_id", $r1)

==================================================
Source Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
Source Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void executeBadge(int)>
Sink Statement: virtualinvoke $r10.<android.content.Context: void sendBroadcast(android.content.Intent)>($r8)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>()
  Step 3: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r7)
  Step 4: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r7, 0, $i1)
  Step 5: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r7 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 6: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = lengthof $r7
  Step 7: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: return null
  Step 8: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: virtualinvoke $r1.<com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>($r4)
  Step 9: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: r0.<com.pushwoosh.notification.PushData: android.graphics.Bitmap mCustomIconBitmap> = $r1
  Step 10: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: return
  Step 11: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 12: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: r0.<com.pushwoosh.notification.AbsNotificationFactory: com.pushwoosh.notification.PushData mPushData> = $r3
  Step 13: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>($r3)
  Step 14: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>($r3)
  Step 16: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>($r4)
  Step 17: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>
    Statement: return $r1
  Step 18: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>($r4)
  Step 19: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>
    Statement: return $r1
  Step 20: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: return $r21
  Step 21: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 22: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 23: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>($r0, $r1)
  Step 24: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory> = $r1
  Step 25: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: return
  Step 26: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 27: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 28: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 29: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: return
  Step 30: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: return
  Step 31: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>("", null)
  Step 32: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>($r3, $r2)
  Step 33: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 34: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>()
  Step 35: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: r0 = <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory>
  Step 36: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: return r0
  Step 37: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: if $r1 == null goto $r2 = staticinvoke <com.pushwoosh.internal.utils.NotificationPrefs: java.lang.String getNotificationFactoryClassName(android.content.Context)>($r0)
  Step 38: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = (com.pushwoosh.notification.AbsNotificationFactory) $r4
  Step 39: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 40: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 41: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>($r5)
  Step 42: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: $r2 = r0.<com.pushwoosh.notification.AbsNotificationFactory: android.content.Context mContext>
  Step 43: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>($r2, $i1)
  Step 44: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>($r0)
  Step 45: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>($r0)
  Step 46: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: specialinvoke $r8.<com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>($r0)
  Step 47: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>
    Statement: specialinvoke r0.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>($r1)
  Step 48: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>
    Statement: r0.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: android.content.Context mContext> = $r1
  Step 49: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>
    Statement: return
  Step 50: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>
    Statement: return
  Step 51: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger mShortcutBadger> = $r8
  Step 52: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: return $r1
  Step 53: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: return $r1
  Step 54: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: return
  Step 55: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: return
  Step 56: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 57: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: return
  Step 58: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: return
  Step 59: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>("", null)
  Step 60: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>($r3, $r2)
  Step 61: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 62: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>($r5)
  Step 63: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>($r2, $i1)
  Step 64: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>($r0)
  Step 65: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>($r0)
  Step 66: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger mShortcutBadger>
  Step 67: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: if $r1 == null goto $r2 = <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: java.lang.String LOG_TAG>
  Step 68: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger mShortcutBadger>
  Step 69: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: return $r1
  Step 70: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: return $r1
  Step 71: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: virtualinvoke $r1.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void count(int)>($i0)
  Step 72: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void count(int)>
    Statement: virtualinvoke r0.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void executeBadge(int)>($i0)
  Step 73: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void executeBadge(int)>
    Statement: virtualinvoke $r10.<android.content.Context: void sendBroadcast(android.content.Intent)>($r8)

==================================================
Source Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
Source Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
Sink Method: <com.pushwoosh.internal.utils.Log: void warn(java.lang.String,java.lang.String)>
Sink Statement: staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Pushwoosh", $r0)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: return $r2
  Step 3: 
    Method: <com.pushwoosh.internal.request.PushRequest: java.util.Map getParams(android.content.Context)>
    Statement: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hwid", $r3)
  Step 4: 
    Method: <com.pushwoosh.internal.request.PushRequest: java.util.Map getParams(android.content.Context)>
    Statement: return $r2
  Step 5: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: staticinvoke <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>($r4, $r5, $r2)
  Step 6: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r7 = staticinvoke <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>($r0, $r1, $r4)
  Step 7: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r12 = staticinvoke <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>($r1)
  Step 8: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: if $r0 != null goto $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>()
  Step 9: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: $r1 = new org.json.JSONObject
  Step 10: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: return $r1
  Step 11: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r11.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("request", $r12)
  Step 12: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r5 = virtualinvoke $r11.<org.json.JSONObject: java.lang.String toString()>()
  Step 13: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
  Step 14: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
  Step 15: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: staticinvoke <com.pushwoosh.internal.utils.Log: void warn(java.lang.String,java.lang.String)>("RequestManager", $r5)
  Step 16: 
    Method: <com.pushwoosh.internal.utils.Log: void warn(java.lang.String,java.lang.String)>
    Statement: $r0 = staticinvoke <com.pushwoosh.internal.utils.Log: java.lang.String buildMessage(java.lang.String,java.lang.String)>($r0, $r1)
  Step 17: 
    Method: <com.pushwoosh.internal.utils.Log: java.lang.String buildMessage(java.lang.String,java.lang.String)>
    Statement: return $r1
  Step 18: 
    Method: <com.pushwoosh.internal.utils.Log: void warn(java.lang.String,java.lang.String)>
    Statement: staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Pushwoosh", $r0)

==================================================
Source Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Source Statement: $r14 = virtualinvoke $r10.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()
Sink Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Sink Statement: virtualinvoke $r14.<java.io.OutputStream: void write(byte[])>($r13)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r14 = virtualinvoke $r10.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()
  Step 2: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r14.<java.io.OutputStream: void write(byte[])>($r13)

==================================================
Source Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Source Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.richpages.LayoutCache$1: void run()>
Sink Statement: virtualinvoke $r5.<java.io.BufferedOutputStream: void write(byte[])>($r8)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r10 = (java.net.HttpURLConnection) $r9
  Step 3: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r17 = virtualinvoke $r10.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
  Step 4: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r17)
  Step 5: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r16.<java.io.InputStream: int read(byte[])>($r13)
  Step 6: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r18.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r13, 0, $i0)
  Step 7: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r13 = virtualinvoke $r18.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 8: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r13)
  Step 9: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>()
  Step 10: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r11.<org.json.JSONObject: void <init>(java.lang.String)>($r2)
  Step 11: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r11.<org.json.JSONObject: int getInt(java.lang.String)>("status_code")
  Step 12: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r3.<com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>($i0)
  Step 13: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode> = $i0
  Step 14: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: return $r3
  Step 16: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $i1 = virtualinvoke $r7.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>()
  Step 17: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: i0 = r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode>
  Step 18: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: return i0
  Step 19: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: if 200 == $i1 goto $r3 = new java.lang.StringBuilder
  Step 20: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: virtualinvoke $r2.<com.pushwoosh.internal.request.PushRequest: void parseResponse(org.json.JSONObject)>($r8)
  Step 21: 
    Method: <com.pushwoosh.internal.request.GetPageRequest: void parseResponse(org.json.JSONObject)>
    Statement: r0.<com.pushwoosh.internal.request.GetPageRequest: java.lang.String templateId> = $r3
  Step 22: 
    Method: <com.pushwoosh.internal.request.GetPageRequest: void parseResponse(org.json.JSONObject)>
    Statement: return
  Step 23: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: return $r8
  Step 24: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r3 = virtualinvoke $r2.<com.pushwoosh.internal.request.GetPageRequest: java.lang.String getTemplateId()>()
  Step 25: 
    Method: <com.pushwoosh.internal.request.GetPageRequest: java.lang.String getTemplateId()>
    Statement: r1 = r0.<com.pushwoosh.internal.request.GetPageRequest: java.lang.String templateId>
  Step 26: 
    Method: <com.pushwoosh.internal.request.GetPageRequest: java.lang.String getTemplateId()>
    Statement: return r1
  Step 27: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
  Step 28: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml")
  Step 29: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
  Step 30: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: specialinvoke $r7.<com.pushwoosh.richpages.WebLayout: void <init>(java.lang.String)>($r3)
  Step 31: 
    Method: <com.pushwoosh.richpages.WebLayout: void <init>(java.lang.String)>
    Statement: r0.<com.pushwoosh.richpages.WebLayout: java.lang.String url> = $r1
  Step 32: 
    Method: <com.pushwoosh.richpages.WebLayout: void <init>(java.lang.String)>
    Statement: return
  Step 33: 
    Method: <com.pushwoosh.richpages.RichPageActivity$GetPageTask: java.lang.Void doInBackground(java.lang.Void[])>
    Statement: $r8 = virtualinvoke $r7.<com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>($r4)
  Step 34: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r2 = r0.<com.pushwoosh.richpages.WebLayout: java.lang.String url>
  Step 35: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: if $r2 == null goto return null
  Step 36: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r4 = virtualinvoke $r3.<com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>($r2)
  Step 37: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>
    Statement: $r2 = specialinvoke r0.<com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>($r1)
  Step 38: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>
    Statement: return null
  Step 39: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>
    Statement: return $r2
  Step 40: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: if $r4 != null goto return $r4
  Step 41: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r4 = specialinvoke r0.<com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>($r2)
  Step 42: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: return null
  Step 43: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: virtualinvoke $r3.<com.pushwoosh.richpages.LayoutCache: void put(java.lang.String,byte[])>($r2, $r4)
  Step 44: 
    Method: <com.pushwoosh.richpages.LayoutCache: void put(java.lang.String,byte[])>
    Statement: specialinvoke r0.<com.pushwoosh.richpages.LayoutCache: void cacheBitmapToDisk(java.lang.String,byte[])>($r1, $r2)
  Step 45: 
    Method: <com.pushwoosh.richpages.LayoutCache: void cacheBitmapToDisk(java.lang.String,byte[])>
    Statement: specialinvoke $r4.<com.pushwoosh.richpages.LayoutCache$1: void <init>(com.pushwoosh.richpages.LayoutCache,java.lang.String,byte[])>(r0, $r1, $r2)
  Step 46: 
    Method: <com.pushwoosh.richpages.LayoutCache$1: void <init>(com.pushwoosh.richpages.LayoutCache,java.lang.String,byte[])>
    Statement: r0.<com.pushwoosh.richpages.LayoutCache$1: byte[] val$byteArray> = $r3
  Step 47: 
    Method: <com.pushwoosh.richpages.LayoutCache$1: void <init>(com.pushwoosh.richpages.LayoutCache,java.lang.String,byte[])>
    Statement: return
  Step 48: 
    Method: <com.pushwoosh.richpages.LayoutCache: void cacheBitmapToDisk(java.lang.String,byte[])>
    Statement: interfaceinvoke $r3.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r4)
  Step 49: 
    Method: <com.pushwoosh.richpages.LayoutCache$1: void run()>
    Statement: $r8 = r0.<com.pushwoosh.richpages.LayoutCache$1: byte[] val$byteArray>
  Step 50: 
    Method: <com.pushwoosh.richpages.LayoutCache$1: void run()>
    Statement: virtualinvoke $r5.<java.io.BufferedOutputStream: void write(byte[])>($r8)

==================================================
Source Method: <com.squareup.picasso.Dispatcher: void dispatchCancel(com.squareup.picasso.Action)>
Source Statement: $r3 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, $r1)
Sink Method: <com.squareup.picasso.Dispatcher: void dispatchCancel(com.squareup.picasso.Action)>
Sink Statement: virtualinvoke $r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r3)
Taint Path:
  Step 1: 
    Method: <com.squareup.picasso.Dispatcher: void dispatchCancel(com.squareup.picasso.Action)>
    Statement: $r3 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, $r1)
  Step 2: 
    Method: <com.squareup.picasso.Dispatcher: void dispatchCancel(com.squareup.picasso.Action)>
    Statement: virtualinvoke $r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r3)

==================================================
Source Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
Source Statement: $r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r0, 0, $r5, 268435456)
Sink Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
Sink Statement: virtualinvoke r0.<com.pushwoosh.location.GeoLocationService: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r7, $r8)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: $r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r0, 0, $r5, 268435456)
  Step 2: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: r0.<com.pushwoosh.location.GeoLocationService: android.app.PendingIntent stationaryRegionPI> = $r6
  Step 3: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: virtualinvoke r0.<com.pushwoosh.location.GeoLocationService: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r7, $r8)

==================================================
Source Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
Source Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
Sink Statement: virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r7, 0, $i1)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>()
  Step 3: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r7)
  Step 4: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r7, 0, $i1)
  Step 5: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r7, 0, $i1)

==================================================
Source Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
Source Statement: $r4 = virtualinvoke $r3.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.richpages.LayoutCache$1: void run()>
Sink Statement: virtualinvoke $r5.<java.io.BufferedOutputStream: void write(byte[])>($r8)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: $r5 = (java.net.HttpURLConnection) $r4
  Step 3: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: if $r5 == null goto return null
  Step 4: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: return null
  Step 5: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: if $r4 == null goto return $r4
  Step 6: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r3 = <com.pushwoosh.richpages.WebLayout: com.pushwoosh.richpages.LayoutCache layoutCache>
  Step 7: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: virtualinvoke $r3.<com.pushwoosh.richpages.LayoutCache: void put(java.lang.String,byte[])>($r2, $r4)
  Step 8: 
    Method: <com.pushwoosh.richpages.LayoutCache: void put(java.lang.String,byte[])>
    Statement: return
  Step 9: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r3 = <com.pushwoosh.richpages.WebLayout: com.pushwoosh.richpages.LayoutCache layoutCache>
  Step 10: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r3 = <com.pushwoosh.richpages.WebLayout: com.pushwoosh.richpages.LayoutCache layoutCache>
  Step 11: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r4 = virtualinvoke $r3.<com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>($r2)
  Step 12: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>
    Statement: $r2 = specialinvoke r0.<com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>($r1)
  Step 13: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>
    Statement: $z0 = r0.<com.pushwoosh.richpages.LayoutCache: boolean diskCacheEnabled>
  Step 14: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>
    Statement: if $z0 == 0 goto return null
  Step 15: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>
    Statement: return null
  Step 16: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>
    Statement: return $r2
  Step 17: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: if $r4 != null goto return $r4
  Step 18: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r4 = specialinvoke r0.<com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>($r2)
  Step 19: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: return null
  Step 20: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: virtualinvoke $r3.<com.pushwoosh.richpages.LayoutCache: void put(java.lang.String,byte[])>($r2, $r4)
  Step 21: 
    Method: <com.pushwoosh.richpages.LayoutCache: void put(java.lang.String,byte[])>
    Statement: specialinvoke r0.<com.pushwoosh.richpages.LayoutCache: void cacheBitmapToDisk(java.lang.String,byte[])>($r1, $r2)
  Step 22: 
    Method: <com.pushwoosh.richpages.LayoutCache: void cacheBitmapToDisk(java.lang.String,byte[])>
    Statement: specialinvoke $r4.<com.pushwoosh.richpages.LayoutCache$1: void <init>(com.pushwoosh.richpages.LayoutCache,java.lang.String,byte[])>(r0, $r1, $r2)
  Step 23: 
    Method: <com.pushwoosh.richpages.LayoutCache$1: void <init>(com.pushwoosh.richpages.LayoutCache,java.lang.String,byte[])>
    Statement: r0.<com.pushwoosh.richpages.LayoutCache$1: byte[] val$byteArray> = $r3
  Step 24: 
    Method: <com.pushwoosh.richpages.LayoutCache$1: void <init>(com.pushwoosh.richpages.LayoutCache,java.lang.String,byte[])>
    Statement: return
  Step 25: 
    Method: <com.pushwoosh.richpages.LayoutCache: void cacheBitmapToDisk(java.lang.String,byte[])>
    Statement: interfaceinvoke $r3.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r4)
  Step 26: 
    Method: <com.pushwoosh.richpages.LayoutCache$1: void run()>
    Statement: $r8 = r0.<com.pushwoosh.richpages.LayoutCache$1: byte[] val$byteArray>
  Step 27: 
    Method: <com.pushwoosh.richpages.LayoutCache$1: void run()>
    Statement: virtualinvoke $r5.<java.io.BufferedOutputStream: void write(byte[])>($r8)

==================================================
Source Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
Source Statement: $r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r0, 0, $r5, 0)
Sink Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
Sink Statement: virtualinvoke r0.<com.pushwoosh.location.GeoLocationService: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r7, $r8)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: $r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r0, 0, $r5, 0)
  Step 2: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: r0.<com.pushwoosh.location.GeoLocationService: android.app.PendingIntent stationaryLocationPollingPI> = $r6
  Step 3: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: virtualinvoke r0.<com.pushwoosh.location.GeoLocationService: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r7, $r8)

==================================================
Source Method: <com.squareup.picasso.Picasso$CleanupThread: void run()>
Source Statement: $r5 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage()>()
Sink Method: <com.squareup.picasso.Picasso$CleanupThread: void run()>
Sink Statement: virtualinvoke $r4.<android.os.Handler: boolean sendMessage(android.os.Message)>($r5)
Taint Path:
  Step 1: 
    Method: <com.squareup.picasso.Picasso$CleanupThread: void run()>
    Statement: $r5 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage()>()
  Step 2: 
    Method: <com.squareup.picasso.Picasso$CleanupThread: void run()>
    Statement: virtualinvoke $r4.<android.os.Handler: boolean sendMessage(android.os.Message)>($r5)

==================================================
Source Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
Source Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
Sink Statement: staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, "Finding badger")
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>()
  Step 3: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r7)
  Step 4: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r7, 0, $i1)
  Step 5: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r7 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 6: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i0 = lengthof $r7
  Step 7: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: return null
  Step 8: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: virtualinvoke $r1.<com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>($r4)
  Step 9: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: r0.<com.pushwoosh.notification.PushData: android.graphics.Bitmap mCustomIconBitmap> = $r1
  Step 10: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: return
  Step 11: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 12: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: r0.<com.pushwoosh.notification.AbsNotificationFactory: com.pushwoosh.notification.PushData mPushData> = $r3
  Step 13: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>($r3)
  Step 14: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>($r3)
  Step 16: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>($r4)
  Step 17: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>
    Statement: return $r1
  Step 18: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>($r4)
  Step 19: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>
    Statement: return $r1
  Step 20: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: return $r21
  Step 21: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 22: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 23: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>($r0, $r1)
  Step 24: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory> = $r1
  Step 25: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: return
  Step 26: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 27: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 28: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 29: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: return
  Step 30: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: return
  Step 31: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>("", null)
  Step 32: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>($r3, $r2)
  Step 33: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 34: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>()
  Step 35: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: r0 = <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory>
  Step 36: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: return r0
  Step 37: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: if $r1 == null goto $r2 = staticinvoke <com.pushwoosh.internal.utils.NotificationPrefs: java.lang.String getNotificationFactoryClassName(android.content.Context)>($r0)
  Step 38: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = (com.pushwoosh.notification.AbsNotificationFactory) $r4
  Step 39: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 40: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 41: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>($r5)
  Step 42: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: $r2 = r0.<com.pushwoosh.notification.AbsNotificationFactory: android.content.Context mContext>
  Step 43: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>($r2, $i1)
  Step 44: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>($r0)
  Step 45: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>($r0)
  Step 46: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: specialinvoke $r8.<com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>($r0)
  Step 47: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>
    Statement: specialinvoke r0.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>($r1)
  Step 48: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>
    Statement: r0.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: android.content.Context mContext> = $r1
  Step 49: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>
    Statement: return
  Step 50: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>
    Statement: return
  Step 51: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger mShortcutBadger> = $r8
  Step 52: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: return $r1
  Step 53: 
    Method: <com.pushwoosh.internal.request.RequestManager: void sendRequest(android.content.Context,com.pushwoosh.internal.request.PushRequest)>
    Statement: throw $r5
  Step 54: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: return
  Step 55: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 56: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: return
  Step 57: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: return
  Step 58: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>("", null)
  Step 59: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>($r3, $r2)
  Step 60: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 61: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>($r5)
  Step 62: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>($r2, $i1)
  Step 63: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>($r0)
  Step 64: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>($r0)
  Step 65: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger mShortcutBadger>
  Step 66: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: if $r1 == null goto $r2 = <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: java.lang.String LOG_TAG>
  Step 67: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r2 = $r6.<android.content.pm.ActivityInfo: java.lang.String packageName>
  Step 68: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, "Finding badger")

==================================================
Source Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
Source Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
Sink Method: <com.pushwoosh.internal.utils.RegistrationPrefs: void setForceRegister(android.content.Context,boolean)>
Sink Statement: interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("force_register", $z0)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: return $r2
  Step 3: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: virtualinvoke r0.<com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>($r1, $r4)
  Step 4: 
    Method: <com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>
    Statement: r0.<com.pushwoosh.PushManager: java.lang.String currentUserId> = $r2
  Step 5: 
    Method: <com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>
    Statement: return
  Step 6: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: return
  Step 7: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance> = $r1
  Step 8: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 9: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 10: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void registerForPushNotifications()>()
  Step 11: 
    Method: <com.pushwoosh.PushManager: void registerForPushNotifications()>
    Statement: return
  Step 12: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void registerForPushNotifications()>()
  Step 13: 
    Method: <com.pushwoosh.PushManager: void registerForPushNotifications()>
    Statement: return
  Step 14: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void onStartup(android.content.Context)>($r2)
  Step 15: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: specialinvoke r0.<com.pushwoosh.PushManager: void sendAppOpen(android.content.Context)>($r1)
  Step 16: 
    Method: <com.pushwoosh.PushManager: void sendAppOpen(android.content.Context)>
    Statement: return
  Step 17: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: r0 := @this: com.pushwoosh.PushManager
  Step 18: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 19: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 20: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 21: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 22: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 23: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 24: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 25: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void onStartup(android.content.Context)>($r2)
  Step 26: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: specialinvoke r0.<com.pushwoosh.PushManager: void sendAppOpen(android.content.Context)>($r1)
  Step 27: 
    Method: <com.pushwoosh.PushManager: void sendAppOpen(android.content.Context)>
    Statement: return
  Step 28: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: return
  Step 29: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void onStartup(android.content.Context)>($r2)
  Step 30: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: return
  Step 31: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 32: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 33: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 34: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 35: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 36: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 37: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 38: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void onStartup(android.content.Context)>($r2)
  Step 39: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: return
  Step 40: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void registerForPushNotifications()>()
  Step 41: 
    Method: <com.pushwoosh.PushManager: void registerForPushNotifications()>
    Statement: return
  Step 42: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 43: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 44: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 45: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 46: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: return
  Step 47: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: return
  Step 48: 
    Method: <br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>
    Statement: return
  Step 49: 
    Method: <dummyMainClass: br.com.canaltech.view.MainActivity dummyMainMethod_br_com_canaltech_view_MainActivity(android.content.Intent)>
    Statement: virtualinvoke $r0.<br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>(null)
  Step 50: 
    Method: <br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>
    Statement: specialinvoke r0.<br.com.canaltech.view.MainActivity: void configurarPushWoosh()>()
  Step 51: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: virtualinvoke $r3.<br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>()
  Step 52: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 53: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 54: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: if $r1 != null goto $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 55: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: specialinvoke $r1.<com.pushwoosh.PushManager: void <init>(android.content.Context)>($r0)
  Step 56: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: r0.<com.pushwoosh.PushManager: android.content.Context mContext> = $r1
  Step 57: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: virtualinvoke r0.<com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>($r1, $r4)
  Step 58: 
    Method: <com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>
    Statement: specialinvoke $r4.<com.pushwoosh.PushManager$1: void <init>(com.pushwoosh.PushManager,android.content.Context,java.lang.String)>(r0, $r1, $r2)
  Step 59: 
    Method: <com.pushwoosh.PushManager$1: void <init>(com.pushwoosh.PushManager,android.content.Context,java.lang.String)>
    Statement: return
  Step 60: 
    Method: <com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>
    Statement: r0 := @this: com.pushwoosh.PushManager
  Step 61: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: r0.<com.pushwoosh.PushManager: android.content.Context mContext> = $r1
  Step 62: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: return
  Step 63: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 64: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r2 = r0.<br.com.canaltech.model.pushwoosh.CorePushWoosh: android.content.Context context>
  Step 65: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: r0 := @this: br.com.canaltech.model.pushwoosh.CorePushWoosh
  Step 66: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: $r3 = r0.<br.com.canaltech.view.MainActivity: br.com.canaltech.model.pushwoosh.CorePushWoosh corePushWoosh>
  Step 67: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: return
  Step 68: 
    Method: <br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>
    Statement: return
  Step 69: 
    Method: <dummyMainClass: br.com.canaltech.view.MainActivity dummyMainMethod_br_com_canaltech_view_MainActivity(android.content.Intent)>
    Statement: virtualinvoke $r0.<br.com.canaltech.view.MainActivity: void onNewIntent(android.content.Intent)>(null)
  Step 70: 
    Method: <br.com.canaltech.view.MainActivity: void onNewIntent(android.content.Intent)>
    Statement: $r3 = r0.<br.com.canaltech.view.MainActivity: br.com.canaltech.model.pushwoosh.CorePushWoosh corePushWoosh>
  Step 71: 
    Method: <br.com.canaltech.view.MainActivity: void onNewIntent(android.content.Intent)>
    Statement: virtualinvoke $r3.<br.com.canaltech.model.pushwoosh.CorePushWoosh: void checkMessage(android.content.Intent)>($r1)
  Step 72: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void checkMessage(android.content.Intent)>
    Statement: specialinvoke r0.<br.com.canaltech.model.pushwoosh.CorePushWoosh: void resetIntentValues(android.content.Intent)>($r1)
  Step 73: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void resetIntentValues(android.content.Intent)>
    Statement: return
  Step 74: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void checkMessage(android.content.Intent)>
    Statement: r0 := @this: br.com.canaltech.model.pushwoosh.CorePushWoosh
  Step 75: 
    Method: <br.com.canaltech.view.MainActivity: void onNewIntent(android.content.Intent)>
    Statement: $r3 = r0.<br.com.canaltech.view.MainActivity: br.com.canaltech.model.pushwoosh.CorePushWoosh corePushWoosh>
  Step 76: 
    Method: <br.com.canaltech.view.MainActivity: void onNewIntent(android.content.Intent)>
    Statement: return
  Step 77: 
    Method: <dummyMainClass: br.com.canaltech.view.MainActivity dummyMainMethod_br_com_canaltech_view_MainActivity(android.content.Intent)>
    Statement: virtualinvoke $r0.<br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>(null)
  Step 78: 
    Method: <br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>
    Statement: specialinvoke r0.<br.com.canaltech.view.MainActivity: void configurarPushWoosh()>()
  Step 79: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: return
  Step 80: 
    Method: <br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>
    Statement: specialinvoke r0.<br.com.canaltech.view.MainActivity: void configurarPushWoosh()>()
  Step 81: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: specialinvoke $r3.<br.com.canaltech.model.pushwoosh.CorePushWoosh: void <init>(android.content.Context,android.app.Activity)>($r4, r0)
  Step 82: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void <init>(android.content.Context,android.app.Activity)>
    Statement: r0.<br.com.canaltech.model.pushwoosh.CorePushWoosh: android.app.Activity activity> = $r2
  Step 83: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void <init>(android.content.Context,android.app.Activity)>
    Statement: return
  Step 84: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: r0.<br.com.canaltech.view.MainActivity: br.com.canaltech.model.pushwoosh.CorePushWoosh corePushWoosh> = $r3
  Step 85: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: $r3 = r0.<br.com.canaltech.view.MainActivity: br.com.canaltech.model.pushwoosh.CorePushWoosh corePushWoosh>
  Step 86: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: virtualinvoke $r3.<br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>()
  Step 87: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r2 = r0.<br.com.canaltech.model.pushwoosh.CorePushWoosh: android.content.Context context>
  Step 88: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 89: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: specialinvoke $r1.<com.pushwoosh.PushManager: void <init>(android.content.Context)>($r0)
  Step 90: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: r0.<com.pushwoosh.PushManager: android.content.Context mContext> = $r1
  Step 91: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: return
  Step 92: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance> = $r1
  Step 93: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 94: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: return
  Step 95: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: return
  Step 96: 
    Method: <br.com.canaltech.view.MainActivity: void onCreate(android.os.Bundle)>
    Statement: specialinvoke r0.<br.com.canaltech.view.MainActivity: void configurarPushWoosh()>()
  Step 97: 
    Method: <br.com.canaltech.view.MainActivity: void configurarPushWoosh()>
    Statement: virtualinvoke $r3.<br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>()
  Step 98: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 99: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 100: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: if $r1 != null goto $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 101: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: staticinvoke <com.pushwoosh.internal.utils.RegistrationPrefs: void setForceRegister(android.content.Context,boolean)>($r0, 1)
  Step 102: 
    Method: <com.pushwoosh.internal.utils.RegistrationPrefs: void setForceRegister(android.content.Context,boolean)>
    Statement: interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("force_register", $z0)

==================================================
Source Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
Source Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.internal.utils.Log: void error(java.lang.String,java.lang.String)>
Sink Statement: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Pushwoosh", $r0)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>()
  Step 3: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r7)
  Step 4: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r7, 0, $i1)
  Step 5: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r7 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 6: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = lengthof $r7
  Step 7: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: return null
  Step 8: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: virtualinvoke $r1.<com.pushwoosh.notification.PushData: void setBitmap(android.graphics.Bitmap)>($r4)
  Step 9: 
    Method: <com.pushwoosh.notification.PushData: void setBitmap(android.graphics.Bitmap)>
    Statement: r0.<com.pushwoosh.notification.PushData: android.graphics.Bitmap mBitmap> = $r1
  Step 10: 
    Method: <com.pushwoosh.notification.PushData: void setBitmap(android.graphics.Bitmap)>
    Statement: r0 := @this: com.pushwoosh.notification.PushData
  Step 11: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: r0 := @this: com.pushwoosh.notification.AbsNotificationFactory
  Step 12: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: r0.<com.pushwoosh.notification.AbsNotificationFactory: com.pushwoosh.notification.PushData mPushData> = $r3
  Step 13: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>($r3)
  Step 14: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>
    Statement: return $r1
  Step 16: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>($r4)
  Step 17: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>
    Statement: return $r2
  Step 18: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: return $r21
  Step 19: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 20: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 21: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>($r0, $r1)
  Step 22: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory> = $r1
  Step 23: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: return
  Step 24: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 25: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 26: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 27: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: return
  Step 28: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: return
  Step 29: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: return $r0
  Step 30: 
    Method: <dummyMainClass: void dummyMainMethod(java.lang.String[])>
    Statement: staticinvoke <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>(null)
  Step 31: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>("", null)
  Step 32: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>($r3, $r2)
  Step 33: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 34: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>()
  Step 35: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: r0 = <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory>
  Step 36: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: return r0
  Step 37: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: if $r1 == null goto $r2 = staticinvoke <com.pushwoosh.internal.utils.NotificationPrefs: java.lang.String getNotificationFactoryClassName(android.content.Context)>($r0)
  Step 38: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r6 = new com.pushwoosh.notification.DefaultNotificationFactory
  Step 39: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r6
  Step 40: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 41: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: $r3 = r0.<com.pushwoosh.notification.AbsNotificationFactory: com.pushwoosh.notification.PushData mPushData>
  Step 42: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>($r3)
  Step 43: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $r4 = virtualinvoke $r1.<com.pushwoosh.notification.PushData: java.lang.String getSound()>()
  Step 44: 
    Method: <com.pushwoosh.notification.PushData: java.lang.String getSound()>
    Statement: r1 = r0.<com.pushwoosh.notification.PushData: java.lang.String mSound>
  Step 45: 
    Method: <com.pushwoosh.notification.PushData: java.lang.String getSound()>
    Statement: return r1
  Step 46: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: void addSound(android.app.Notification,java.lang.String)>($r21, $r4)
  Step 47: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void addSound(android.app.Notification,java.lang.String)>
    Statement: $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2)
  Step 48: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void addSound(android.app.Notification,java.lang.String)>
    Statement: $r2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
  Step 49: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void addSound(android.app.Notification,java.lang.String)>
    Statement: $r12 = staticinvoke <com.pushwoosh.internal.utils.NotificationUtils: android.net.Uri getUriForAssetPath(android.content.Context,java.lang.String)>($r3, $r2)
  Step 50: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.net.Uri getUriForAssetPath(android.content.Context,java.lang.String)>
    Statement: $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)
  Step 51: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.net.Uri getUriForAssetPath(android.content.Context,java.lang.String)>
    Statement: $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()
  Step 52: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.net.Uri getUriForAssetPath(android.content.Context,java.lang.String)>
    Statement: staticinvoke <com.pushwoosh.internal.utils.Log: void error(java.lang.String,java.lang.String)>("Asset", $r1)
  Step 53: 
    Method: <com.pushwoosh.internal.utils.Log: void error(java.lang.String,java.lang.String)>
    Statement: $r0 = staticinvoke <com.pushwoosh.internal.utils.Log: java.lang.String buildMessage(java.lang.String,java.lang.String)>($r0, $r1)
  Step 54: 
    Method: <com.pushwoosh.internal.utils.Log: java.lang.String buildMessage(java.lang.String,java.lang.String)>
    Statement: return $r1
  Step 55: 
    Method: <com.pushwoosh.internal.utils.Log: void error(java.lang.String,java.lang.String)>
    Statement: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Pushwoosh", $r0)

==================================================
Source Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Source Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.internal.utils.Log: void error(java.lang.String,java.lang.String,java.lang.Throwable)>
Sink Statement: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Pushwoosh", $r0, $r2)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r10 = (java.net.HttpURLConnection) $r9
  Step 3: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r17 = virtualinvoke $r10.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
  Step 4: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r17)
  Step 5: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r16.<java.io.InputStream: int read(byte[])>($r13)
  Step 6: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r18.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r13, 0, $i0)
  Step 7: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r13 = virtualinvoke $r18.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 8: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r13)
  Step 9: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>()
  Step 10: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r11.<org.json.JSONObject: void <init>(java.lang.String)>($r2)
  Step 11: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r11.<org.json.JSONObject: int getInt(java.lang.String)>("status_code")
  Step 12: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r3.<com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>($i0)
  Step 13: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode> = $i0
  Step 14: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: return $r3
  Step 16: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $i1 = virtualinvoke $r7.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>()
  Step 17: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: i0 = r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode>
  Step 18: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: return i0
  Step 19: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: if 200 == $i1 goto $r3 = new java.lang.StringBuilder
  Step 20: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: staticinvoke <com.pushwoosh.internal.utils.Log: void error(java.lang.String,java.lang.String,java.lang.Throwable)>("RequestManager", $r4, $r6)
  Step 21: 
    Method: <com.pushwoosh.internal.utils.Log: void error(java.lang.String,java.lang.String,java.lang.Throwable)>
    Statement: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Pushwoosh", $r0, $r2)

==================================================
Source Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
Source Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
Sink Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
Sink Statement: interfaceinvoke $r8.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("deviceid", $r2)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: if $r2 != null goto return $r2
  Step 3: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: interfaceinvoke $r8.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("deviceid", $r2)

==================================================
Source Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Source Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Sink Statement: virtualinvoke $r10.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Content-Length", $r2)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r10 = (java.net.HttpURLConnection) $r9
  Step 3: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r17 = virtualinvoke $r10.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
  Step 4: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r17)
  Step 5: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r16.<java.io.InputStream: int read(byte[])>($r13)
  Step 6: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r18.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r13, 0, $i0)
  Step 7: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r13 = virtualinvoke $r18.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 8: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r13)
  Step 9: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>()
  Step 10: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r11.<org.json.JSONObject: void <init>(java.lang.String)>($r2)
  Step 11: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r11.<org.json.JSONObject: int getInt(java.lang.String)>("status_code")
  Step 12: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r3.<com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>($i0)
  Step 13: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode> = $i0
  Step 14: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: return $r3
  Step 16: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $i1 = virtualinvoke $r7.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>()
  Step 17: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: i0 = r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode>
  Step 18: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: return i0
  Step 19: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: if 200 == $i1 goto $r3 = new java.lang.StringBuilder
  Step 20: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r7 = staticinvoke <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>($r0, $r1, $r4)
  Step 21: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r12 = staticinvoke <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>($r1)
  Step 22: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: $r4 = staticinvoke <com.pushwoosh.internal.utils.JsonUtils: java.lang.Object wrap(java.lang.Object)>($r4)
  Step 23: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: java.lang.Object wrap(java.lang.Object)>
    Statement: return null
  Step 24: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r6, $r4)
  Step 25: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: return $r1
  Step 26: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r11.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("request", $r12)
  Step 27: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r2 = virtualinvoke $r11.<org.json.JSONObject: java.lang.String toString()>()
  Step 28: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r10.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Content-Length", $r2)

==================================================
Source Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
Source Statement: $r4 = virtualinvoke $r3.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
Sink Statement: $r4 = virtualinvoke $r3.<java.net.URL: java.net.URLConnection openConnection()>()
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: $r5 = (java.net.HttpURLConnection) $r4
  Step 3: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: return null
  Step 4: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: if $r4 == null goto return $r4
  Step 5: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r3 = <com.pushwoosh.richpages.WebLayout: com.pushwoosh.richpages.LayoutCache layoutCache>
  Step 6: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: virtualinvoke $r3.<com.pushwoosh.richpages.LayoutCache: void put(java.lang.String,byte[])>($r2, $r4)
  Step 7: 
    Method: <com.pushwoosh.richpages.LayoutCache: void put(java.lang.String,byte[])>
    Statement: return
  Step 8: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r3 = <com.pushwoosh.richpages.WebLayout: com.pushwoosh.richpages.LayoutCache layoutCache>
  Step 9: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r3 = <com.pushwoosh.richpages.WebLayout: com.pushwoosh.richpages.LayoutCache layoutCache>
  Step 10: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r4 = virtualinvoke $r3.<com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>($r2)
  Step 11: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>
    Statement: $r2 = specialinvoke r0.<com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>($r1)
  Step 12: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>
    Statement: $z0 = r0.<com.pushwoosh.richpages.LayoutCache: boolean diskCacheEnabled>
  Step 13: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>
    Statement: if $z0 == 0 goto return null
  Step 14: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] getLayoutFromDisk(java.lang.String)>
    Statement: return null
  Step 15: 
    Method: <com.pushwoosh.richpages.LayoutCache: byte[] get(java.lang.String)>
    Statement: return $r2
  Step 16: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: if $r4 != null goto return $r4
  Step 17: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r2 = r0.<com.pushwoosh.richpages.WebLayout: java.lang.String url>
  Step 18: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayout(android.content.Context)>
    Statement: $r4 = specialinvoke r0.<com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>($r2)
  Step 19: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: specialinvoke $r21.<java.net.URL: void <init>(java.lang.String)>($r1)
  Step 20: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: $r3 = $r21
  Step 21: 
    Method: <com.pushwoosh.richpages.WebLayout: byte[] getLayoutFromUrl(java.lang.String)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URL: java.net.URLConnection openConnection()>()

==================================================
Source Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Source Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Sink Statement: virtualinvoke $r14.<java.io.OutputStream: void write(byte[])>($r13)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r10 = (java.net.HttpURLConnection) $r9
  Step 3: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r17 = virtualinvoke $r10.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
  Step 4: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r17)
  Step 5: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r16.<java.io.InputStream: int read(byte[])>($r13)
  Step 6: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r18.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r13, 0, $i0)
  Step 7: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r13 = virtualinvoke $r18.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 8: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r13)
  Step 9: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>()
  Step 10: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r11.<org.json.JSONObject: void <init>(java.lang.String)>($r2)
  Step 11: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r11.<org.json.JSONObject: int getInt(java.lang.String)>("status_code")
  Step 12: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r3.<com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>($i0)
  Step 13: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode> = $i0
  Step 14: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: return $r3
  Step 16: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $i1 = virtualinvoke $r7.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>()
  Step 17: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: i0 = r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode>
  Step 18: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: return i0
  Step 19: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: if 200 == $i1 goto $r3 = new java.lang.StringBuilder
  Step 20: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r7 = staticinvoke <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>($r0, $r1, $r4)
  Step 21: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r12 = staticinvoke <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>($r1)
  Step 22: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: $r4 = staticinvoke <com.pushwoosh.internal.utils.JsonUtils: java.lang.Object wrap(java.lang.Object)>($r4)
  Step 23: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: java.lang.Object wrap(java.lang.Object)>
    Statement: return null
  Step 24: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r6, $r4)
  Step 25: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: return $r1
  Step 26: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r11.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("request", $r12)
  Step 27: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r2 = virtualinvoke $r11.<org.json.JSONObject: java.lang.String toString()>()
  Step 28: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r13 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>()
  Step 29: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r14.<java.io.OutputStream: void write(byte[])>($r13)

==================================================
Source Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
Source Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.internal.utils.NotificationPrefs: void setMessageId(android.content.Context,int)>
Sink Statement: interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>("dm_messageid", $i0)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>()
  Step 3: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r7)
  Step 4: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r7, 0, $i1)
  Step 5: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r7 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 6: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = lengthof $r7
  Step 7: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: return null
  Step 8: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: virtualinvoke $r1.<com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>($r4)
  Step 9: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: r0.<com.pushwoosh.notification.PushData: android.graphics.Bitmap mCustomIconBitmap> = $r1
  Step 10: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: return
  Step 11: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 12: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: r0.<com.pushwoosh.notification.AbsNotificationFactory: com.pushwoosh.notification.PushData mPushData> = $r3
  Step 13: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>($r3)
  Step 14: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>($r3)
  Step 16: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>($r4)
  Step 17: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>
    Statement: return $r1
  Step 18: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>($r4)
  Step 19: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>
    Statement: return $r1
  Step 20: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: return $r21
  Step 21: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 22: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 23: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>($r0, $r1)
  Step 24: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory> = $r1
  Step 25: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: return
  Step 26: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 27: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 28: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 29: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: return
  Step 30: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: return
  Step 31: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>("", null)
  Step 32: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>($r3, $r2)
  Step 33: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 34: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>()
  Step 35: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: r0 = <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory>
  Step 36: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: return r0
  Step 37: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: if $r1 == null goto $r2 = staticinvoke <com.pushwoosh.internal.utils.NotificationPrefs: java.lang.String getNotificationFactoryClassName(android.content.Context)>($r0)
  Step 38: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r6 = new com.pushwoosh.notification.DefaultNotificationFactory
  Step 39: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r6
  Step 40: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 41: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>($r3)
  Step 42: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: void addSound(android.app.Notification,java.lang.String)>($r21, $r4)
  Step 43: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void addSound(android.app.Notification,java.lang.String)>
    Statement: $r6 = r0.<com.pushwoosh.notification.AbsNotificationFactory: com.pushwoosh.notification.PushData mPushData>
  Step 44: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void addSound(android.app.Notification,java.lang.String)>
    Statement: $r7 = virtualinvoke $r6.<com.pushwoosh.notification.PushData: com.pushwoosh.notification.SoundType getSoundType()>()
  Step 45: 
    Method: <com.pushwoosh.notification.PushData: com.pushwoosh.notification.SoundType getSoundType()>
    Statement: r1 = r0.<com.pushwoosh.notification.PushData: com.pushwoosh.notification.SoundType mSoundType>
  Step 46: 
    Method: <com.pushwoosh.notification.PushData: com.pushwoosh.notification.SoundType getSoundType()>
    Statement: return r1
  Step 47: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void addSound(android.app.Notification,java.lang.String)>
    Statement: if $r7 == $r8 goto $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2)
  Step 48: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void addSound(android.app.Notification,java.lang.String)>
    Statement: $r1.<android.app.Notification: android.net.Uri sound> = $r12
  Step 49: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void addSound(android.app.Notification,java.lang.String)>
    Statement: return
  Step 50: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: return $r21
  Step 51: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>($r5)
  Step 52: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: if $r1 != null goto $r2 = r0.<com.pushwoosh.notification.AbsNotificationFactory: android.content.Context mContext>
  Step 53: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: staticinvoke <com.pushwoosh.internal.utils.NotificationPrefs: void setMessageId(android.content.Context,int)>($r2, $i1)
  Step 54: 
    Method: <com.pushwoosh.internal.utils.NotificationPrefs: void setMessageId(android.content.Context,int)>
    Statement: interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>("dm_messageid", $i0)

==================================================
Source Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
Source Statement: $r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r0, 0, $r5, 0)
Sink Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
Sink Statement: virtualinvoke r0.<com.pushwoosh.location.GeoLocationService: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r7, $r8)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: $r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r0, 0, $r5, 0)
  Step 2: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: r0.<com.pushwoosh.location.GeoLocationService: android.app.PendingIntent stationaryAlarmPI> = $r6
  Step 3: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: virtualinvoke r0.<com.pushwoosh.location.GeoLocationService: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r7, $r8)

==================================================
Source Method: <com.squareup.picasso.Dispatcher: void dispatchAirplaneModeChange(boolean)>
Source Statement: $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(10, $b0, 0)
Sink Method: <com.squareup.picasso.Dispatcher: void dispatchAirplaneModeChange(boolean)>
Sink Statement: virtualinvoke $r1.<android.os.Handler: boolean sendMessage(android.os.Message)>($r3)
Taint Path:
  Step 1: 
    Method: <com.squareup.picasso.Dispatcher: void dispatchAirplaneModeChange(boolean)>
    Statement: $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(10, $b0, 0)
  Step 2: 
    Method: <com.squareup.picasso.Dispatcher: void dispatchAirplaneModeChange(boolean)>
    Statement: virtualinvoke $r1.<android.os.Handler: boolean sendMessage(android.os.Message)>($r3)

==================================================
Source Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
Source Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
Sink Statement: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r2, $r7, $r18)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>()
  Step 3: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r7)
  Step 4: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r7, 0, $i1)
  Step 5: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r7 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 6: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = lengthof $r7
  Step 7: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: return null
  Step 8: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: virtualinvoke $r1.<com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>($r4)
  Step 9: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: r0.<com.pushwoosh.notification.PushData: android.graphics.Bitmap mCustomIconBitmap> = $r1
  Step 10: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: return
  Step 11: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 12: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: r0.<com.pushwoosh.notification.AbsNotificationFactory: com.pushwoosh.notification.PushData mPushData> = $r3
  Step 13: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>($r3)
  Step 14: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>($r3)
  Step 16: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: void addVibration(android.app.Notification,java.lang.String)>($r21, $r4)
  Step 17: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void addVibration(android.app.Notification,java.lang.String)>
    Statement: return
  Step 18: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: void addVibration(android.app.Notification,java.lang.String)>($r21, $r4)
  Step 19: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void addVibration(android.app.Notification,java.lang.String)>
    Statement: return
  Step 20: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: return $r21
  Step 21: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 22: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 23: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>($r0, $r1)
  Step 24: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory> = $r1
  Step 25: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: return
  Step 26: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r6
  Step 27: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 28: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 29: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: return
  Step 30: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: return
  Step 31: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>("", null)
  Step 32: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>($r3, $r2)
  Step 33: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 34: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>()
  Step 35: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: r0 = <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory>
  Step 36: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: return r0
  Step 37: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: if $r1 == null goto $r2 = staticinvoke <com.pushwoosh.internal.utils.NotificationPrefs: java.lang.String getNotificationFactoryClassName(android.content.Context)>($r0)
  Step 38: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = (com.pushwoosh.notification.AbsNotificationFactory) $r4
  Step 39: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 40: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 41: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>($r5)
  Step 42: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: $r2 = r0.<com.pushwoosh.notification.AbsNotificationFactory: android.content.Context mContext>
  Step 43: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>($r2, $i1)
  Step 44: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>($r0)
  Step 45: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>($r0)
  Step 46: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r15[0] = $r0
  Step 47: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r2 = <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: java.lang.String LOG_TAG>
  Step 48: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r2, $r7, $r18)

==================================================
Source Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
Source Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
Sink Method: <com.pushwoosh.internal.utils.Log: void error(java.lang.String,java.lang.String,java.lang.Throwable)>
Sink Statement: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Pushwoosh", $r0, $r2)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: return $r2
  Step 3: 
    Method: <com.pushwoosh.internal.request.PushRequest: java.util.Map getParams(android.content.Context)>
    Statement: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hwid", $r3)
  Step 4: 
    Method: <com.pushwoosh.internal.request.PushRequest: java.util.Map getParams(android.content.Context)>
    Statement: return $r2
  Step 5: 
    Method: <com.pushwoosh.PushManager: void registerUserInternal(android.content.Context,java.lang.String)>
    Statement: $r4 = staticinvoke <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>($r0, $r3, $r2)
  Step 6: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r7 = staticinvoke <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>($r0, $r1, $r4)
  Step 7: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r12 = staticinvoke <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>($r1)
  Step 8: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: if $r0 != null goto $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>()
  Step 9: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: $r7 = new java.lang.NullPointerException
  Step 10: 
    Method: <com.pushwoosh.internal.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)>
    Statement: throw $r7
  Step 11: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: throw $r20
  Step 12: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r4 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>()
  Step 13: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
  Step 14: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Response = ")
  Step 15: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8)
  Step 16: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
  Step 17: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: staticinvoke <com.pushwoosh.internal.utils.Log: void error(java.lang.String,java.lang.String,java.lang.Throwable)>("RequestManager", $r4, $r6)
  Step 18: 
    Method: <com.pushwoosh.internal.utils.Log: void error(java.lang.String,java.lang.String,java.lang.Throwable)>
    Statement: $r0 = staticinvoke <com.pushwoosh.internal.utils.Log: java.lang.String buildMessage(java.lang.String,java.lang.String)>($r0, $r1)
  Step 19: 
    Method: <com.pushwoosh.internal.utils.Log: java.lang.String buildMessage(java.lang.String,java.lang.String)>
    Statement: return $r1
  Step 20: 
    Method: <com.pushwoosh.internal.utils.Log: void error(java.lang.String,java.lang.String,java.lang.Throwable)>
    Statement: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Pushwoosh", $r0, $r2)

==================================================
Source Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
Source Statement: $r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r0, 0, $r5, 0)
Sink Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
Sink Statement: virtualinvoke r0.<com.pushwoosh.location.GeoLocationService: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r7, $r8)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: $r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r0, 0, $r5, 0)
  Step 2: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: r0.<com.pushwoosh.location.GeoLocationService: android.app.PendingIntent stationaryAlarmPI> = $r6
  Step 3: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: r0 := @this: com.pushwoosh.location.GeoLocationService
  Step 4: 
    Method: <dummyMainClass: com.pushwoosh.location.GeoLocationService dummyMainMethod_com_pushwoosh_location_GeoLocationService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.location.GeoLocationService: void onCreate()>()
  Step 5: 
    Method: <com.pushwoosh.location.GeoLocationService: void onCreate()>
    Statement: virtualinvoke r0.<com.pushwoosh.location.GeoLocationService: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r7, $r8)

==================================================
Source Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Source Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Sink Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r10 = (java.net.HttpURLConnection) $r9
  Step 3: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r17 = virtualinvoke $r10.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
  Step 4: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r17)
  Step 5: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r16.<java.io.InputStream: int read(byte[])>($r13)
  Step 6: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r18.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r13, 0, $i0)
  Step 7: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r13 = virtualinvoke $r18.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 8: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r13)
  Step 9: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>()
  Step 10: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r11.<org.json.JSONObject: void <init>(java.lang.String)>($r2)
  Step 11: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r11.<org.json.JSONObject: int getInt(java.lang.String)>("status_code")
  Step 12: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r3.<com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>($i0)
  Step 13: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode> = $i0
  Step 14: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: return $r3
  Step 16: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $i1 = virtualinvoke $r7.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>()
  Step 17: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: i0 = r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode>
  Step 18: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: return i0
  Step 19: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: if 200 == $i1 goto $r3 = new java.lang.StringBuilder
  Step 20: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r7 = staticinvoke <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>($r0, $r1, $r4)
  Step 21: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r6 = staticinvoke <com.pushwoosh.internal.request.RequestManager: java.lang.String getDefaultUrl(android.content.Context)>($r0)
  Step 22: 
    Method: <com.pushwoosh.internal.request.RequestManager: java.lang.String getDefaultUrl(android.content.Context)>
    Statement: return "https://cp.pushwoosh.com/json/1.3/"
  Step 23: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
  Step 24: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2)
  Step 25: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
  Step 26: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r8.<java.net.URL: void <init>(java.lang.String)>($r5)
  Step 27: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()

==================================================
Source Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
Source Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
Sink Statement: staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, $r7)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r4 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>()
  Step 3: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r7)
  Step 4: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r7, 0, $i1)
  Step 5: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $r7 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 6: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: $i0 = lengthof $r7
  Step 7: 
    Method: <com.pushwoosh.internal.utils.NotificationUtils: android.graphics.Bitmap tryToGetBitmapFromInternet(java.lang.String,android.content.Context,int)>
    Statement: return null
  Step 8: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: virtualinvoke $r1.<com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>($r4)
  Step 9: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: r0.<com.pushwoosh.notification.PushData: android.graphics.Bitmap mCustomIconBitmap> = $r1
  Step 10: 
    Method: <com.pushwoosh.notification.PushData: void setCustomIconBitmap(android.graphics.Bitmap)>
    Statement: return
  Step 11: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 12: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: r0.<com.pushwoosh.notification.AbsNotificationFactory: com.pushwoosh.notification.PushData mPushData> = $r3
  Step 13: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>($r3)
  Step 14: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void load(com.pushwoosh.notification.PushData)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>($r3)
  Step 16: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>($r4)
  Step 17: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>
    Statement: return $r1
  Step 18: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: $r5 = virtualinvoke r0.<com.pushwoosh.notification.DefaultNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>($r4)
  Step 19: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: java.lang.CharSequence getContentFromHtml(java.lang.String)>
    Statement: return $r1
  Step 20: 
    Method: <com.pushwoosh.notification.DefaultNotificationFactory: android.app.Notification onGenerateNotification(com.pushwoosh.notification.PushData)>
    Statement: return $r21
  Step 21: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 22: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 23: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>($r0, $r1)
  Step 24: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory> = $r1
  Step 25: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setNotificationFactory(android.content.Context,com.pushwoosh.notification.AbsNotificationFactory)>
    Statement: return
  Step 26: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 27: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 28: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 29: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: return
  Step 30: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: return
  Step 31: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>("", null)
  Step 32: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>($r3, $r2)
  Step 33: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: $r11 = staticinvoke <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>($r0)
  Step 34: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>()
  Step 35: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: r0 = <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory mNotificationFactory>
  Step 36: 
    Method: <com.pushwoosh.internal.PushManagerImpl: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory()>
    Statement: return r0
  Step 37: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: if $r1 == null goto $r2 = staticinvoke <com.pushwoosh.internal.utils.NotificationPrefs: java.lang.String getNotificationFactoryClassName(android.content.Context)>($r0)
  Step 38: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: $r1 = (com.pushwoosh.notification.AbsNotificationFactory) $r4
  Step 39: 
    Method: <com.pushwoosh.internal.PushServiceHelper: com.pushwoosh.notification.AbsNotificationFactory getNotificationFactory(android.content.Context)>
    Statement: return $r1
  Step 40: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 41: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>($r5)
  Step 42: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: $r2 = r0.<com.pushwoosh.notification.AbsNotificationFactory: android.content.Context mContext>
  Step 43: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>($r2, $i1)
  Step 44: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>($r0)
  Step 45: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>($r0)
  Step 46: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: specialinvoke $r8.<com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>($r0)
  Step 47: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>
    Statement: specialinvoke r0.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>($r1)
  Step 48: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>
    Statement: r0.<com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: android.content.Context mContext> = $r1
  Step 49: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: void <init>(android.content.Context)>
    Statement: return
  Step 50: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.impl.XiaomiHomeBadger: void <init>(android.content.Context)>
    Statement: return
  Step 51: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger mShortcutBadger> = $r8
  Step 52: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: return $r1
  Step 53: 
    Method: <com.pushwoosh.internal.request.RequestManager: void sendRequest(android.content.Context,com.pushwoosh.internal.request.PushRequest)>
    Statement: throw $r5
  Step 54: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: return
  Step 55: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: return
  Step 56: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: return
  Step 57: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: return
  Step 58: 
    Method: <dummyMainClass: com.pushwoosh.GCMListenerService dummyMainMethod_com_pushwoosh_GCMListenerService(android.content.Intent)>
    Statement: virtualinvoke $r0.<com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>("", null)
  Step 59: 
    Method: <com.pushwoosh.GCMListenerService: void onMessageReceived(java.lang.String,android.os.Bundle)>
    Statement: staticinvoke <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>($r3, $r2)
  Step 60: 
    Method: <com.pushwoosh.internal.PushServiceHelper: void generateNotification(android.content.Context,android.os.Bundle)>
    Statement: virtualinvoke $r11.<com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>($r0, $r1, $r2, $r10)
  Step 61: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void notify(android.content.Context,android.os.Bundle,com.pushwoosh.notification.PushData,android.content.Intent)>
    Statement: specialinvoke r0.<com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>($r5)
  Step 62: 
    Method: <com.pushwoosh.notification.AbsNotificationFactory: void generateNotification(android.app.Notification)>
    Statement: staticinvoke <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>($r2, $i1)
  Step 63: 
    Method: <com.pushwoosh.internal.PushManagerImpl: void setBadgeNumber(android.content.Context,int)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>($r0)
  Step 64: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger 'with'(android.content.Context)>
    Statement: $r1 = staticinvoke <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>($r0)
  Step 65: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger mShortcutBadger>
  Step 66: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: if $r1 == null goto $r2 = <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: java.lang.String LOG_TAG>
  Step 67: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r17 = new java.lang.StringBuilder
  Step 68: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Returning badger:")
  Step 69: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
  Step 70: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: $r7 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
  Step 71: 
    Method: <com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger: com.pushwoosh.thirdparty.shortcutbadger.ShortcutBadger getShortcutBadger(android.content.Context)>
    Statement: staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, $r7)

==================================================
Source Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Source Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.internal.utils.NotificationPrefs: void setBaseUrl(android.content.Context,java.lang.String)>
Sink Statement: interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("pw_base_url", $r1)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r10 = (java.net.HttpURLConnection) $r9
  Step 3: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: staticinvoke <com.pushwoosh.internal.utils.NotificationPrefs: void setBaseUrl(android.content.Context,java.lang.String)>($r0, $r2)
  Step 4: 
    Method: <com.pushwoosh.internal.utils.NotificationPrefs: void setBaseUrl(android.content.Context,java.lang.String)>
    Statement: interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("pw_base_url", $r1)

==================================================
Source Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
Source Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
Sink Method: <com.pushwoosh.internal.utils.RegistrationPrefs: void setProjectId(android.content.Context,java.lang.String)>
Sink Statement: interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("project_id", $r1)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: $r2 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()
  Step 2: 
    Method: <com.pushwoosh.internal.utils.GeneralUtils: java.lang.String getDeviceUUID(android.content.Context)>
    Statement: return $r2
  Step 3: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: virtualinvoke r0.<com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>($r1, $r4)
  Step 4: 
    Method: <com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>
    Statement: r0.<com.pushwoosh.PushManager: java.lang.String currentUserId> = $r2
  Step 5: 
    Method: <com.pushwoosh.PushManager: void setUserId(android.content.Context,java.lang.String)>
    Statement: return
  Step 6: 
    Method: <com.pushwoosh.PushManager: void <init>(android.content.Context)>
    Statement: return
  Step 7: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance> = $r1
  Step 8: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 9: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 10: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void onStartup(android.content.Context)>($r2)
  Step 11: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: specialinvoke r0.<com.pushwoosh.PushManager: void registerOnPushWoosh(android.content.Context,java.lang.String)>($r1, $r6)
  Step 12: 
    Method: <com.pushwoosh.PushManager: void registerOnPushWoosh(android.content.Context,java.lang.String)>
    Statement: return
  Step 13: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: r0 := @this: com.pushwoosh.PushManager
  Step 14: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 15: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 16: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: return $r1
  Step 17: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: virtualinvoke $r1.<com.pushwoosh.PushManager: void onStartup(android.content.Context)>($r2)
  Step 18: 
    Method: <com.pushwoosh.PushManager: void onStartup(android.content.Context)>
    Statement: return
  Step 19: 
    Method: <br.com.canaltech.model.pushwoosh.CorePushWoosh: void startAndRegisterPush()>
    Statement: $r1 = staticinvoke <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>($r2)
  Step 20: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 21: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: if $r1 != null goto $r1 = <com.pushwoosh.PushManager: com.pushwoosh.PushManager instance>
  Step 22: 
    Method: <com.pushwoosh.PushManager: com.pushwoosh.PushManager getInstance(android.content.Context)>
    Statement: staticinvoke <com.pushwoosh.internal.utils.RegistrationPrefs: void setProjectId(android.content.Context,java.lang.String)>($r0, $r6)
  Step 23: 
    Method: <com.pushwoosh.internal.utils.RegistrationPrefs: void setProjectId(android.content.Context,java.lang.String)>
    Statement: interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("project_id", $r1)

==================================================
Source Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Source Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Sink Statement: virtualinvoke $r10.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Content-Type", "application/json; charset=utf-8")
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r10 = (java.net.HttpURLConnection) $r9
  Step 3: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r17 = virtualinvoke $r10.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
  Step 4: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r17)
  Step 5: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r16.<java.io.InputStream: int read(byte[])>($r13)
  Step 6: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r18.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r13, 0, $i0)
  Step 7: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r13 = virtualinvoke $r18.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 8: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r13)
  Step 9: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>()
  Step 10: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r11.<org.json.JSONObject: void <init>(java.lang.String)>($r2)
  Step 11: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r11.<org.json.JSONObject: int getInt(java.lang.String)>("status_code")
  Step 12: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r3.<com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>($i0)
  Step 13: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode> = $i0
  Step 14: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: return $r3
  Step 16: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $i1 = virtualinvoke $r7.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>()
  Step 17: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: i0 = r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode>
  Step 18: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: return i0
  Step 19: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: if 200 == $i1 goto $r3 = new java.lang.StringBuilder
  Step 20: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r7 = staticinvoke <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>($r0, $r1, $r4)
  Step 21: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r10.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Content-Type", "application/json; charset=utf-8")

==================================================
Source Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Source Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
Sink Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
Sink Statement: virtualinvoke $r18.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r13, 0, $i0)
Taint Path:
  Step 1: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r9 = virtualinvoke $r8.<java.net.URL: java.net.URLConnection openConnection()>()
  Step 2: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r10 = (java.net.HttpURLConnection) $r9
  Step 3: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r17 = virtualinvoke $r10.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
  Step 4: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r17)
  Step 5: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r16.<java.io.InputStream: int read(byte[])>($r13)
  Step 6: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r18.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r13, 0, $i0)
  Step 7: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r13 = virtualinvoke $r18.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
  Step 8: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r13)
  Step 9: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>()
  Step 10: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: specialinvoke $r11.<org.json.JSONObject: void <init>(java.lang.String)>($r2)
  Step 11: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: $i0 = virtualinvoke $r11.<org.json.JSONObject: int getInt(java.lang.String)>("status_code")
  Step 12: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r3.<com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>($i0)
  Step 13: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode> = $i0
  Step 14: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: void setPushwooshCode(int)>
    Statement: return
  Step 15: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: return $r3
  Step 16: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $i1 = virtualinvoke $r7.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>()
  Step 17: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: i0 = r0.<com.pushwoosh.internal.request.RequestManager$NetworkResult: int mPushwooshCode>
  Step 18: 
    Method: <com.pushwoosh.internal.request.RequestManager$NetworkResult: int getPushwooshCode()>
    Statement: return i0
  Step 19: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: if 200 == $i1 goto $r3 = new java.lang.StringBuilder
  Step 20: 
    Method: <com.pushwoosh.internal.request.RequestManager: org.json.JSONObject sendRequestSync(android.content.Context,java.util.Map,com.pushwoosh.internal.request.PushRequest)>
    Statement: $r7 = staticinvoke <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>($r0, $r1, $r4)
  Step 21: 
    Method: <com.pushwoosh.internal.request.RequestManager: com.pushwoosh.internal.request.RequestManager$NetworkResult makeRequest(android.content.Context,java.util.Map,java.lang.String)>
    Statement: virtualinvoke $r18.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r13, 0, $i0)

==================================================

44 paths in total.

==================================================
