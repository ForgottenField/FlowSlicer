/* ADQLParser.java */
/* Generated By:JavaCC: Do not edit this line. ADQLParser.java */
package FlowSlicer.DataStructure.parser;

import FlowSlicer.Global;

import java.util.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class ADQLParser implements ADQLParserConstants {
  public List<QueryInfo> queries = new ArrayList<>();

  public static void parse() throws ParseException, FileNotFoundException {
    FileInputStream fis = new FileInputStream("example.adql");
    ADQLParser parser = new ADQLParser(fis);
    parser.QueryList();
    for (QueryInfo q : parser.queries) {
      if (q instanceof FlowQueryInfo) {
          if (((FlowQueryInfo) q).fromType.equals("Statement")) {
              Global.v().getAppModel().setFlowQuerySourceStmt(((FlowQueryInfo) q).fromValue);
              Global.v().getAppModel().setFlowQuerySinkStmt(((FlowQueryInfo) q).toValue);
          } else {
              Global.v().getAppModel().setFlowQuerySourceMethod(((FlowQueryInfo) q).fromValue);
              Global.v().getAppModel().setFlowQuerySinkMethod(((FlowQueryInfo) q).toValue);
          }
      }
    }
    System.out.println("ADQL query parsed successfully.");
  }

  public interface QueryInfo {}

  public static class FlowQueryInfo implements QueryInfo {
    public String fromType, fromValue;
    public String toType, toValue;

    public FlowQueryInfo(String fromType, String fromValue, String toType, String toValue) {
      this.fromType = fromType;
      this.fromValue = fromValue;
      this.toType = toType;
      this.toValue = toValue;
    }

    public String toString() {
      return "FLOW FROM " + fromType + "(" + fromValue + ") TO " + toType + "(" + toValue + ")";
    }
  }

  public static class OperationQueryInfo implements QueryInfo {
    public String opType;
    public List<String> items = new ArrayList<>();
    public List<String> usesItems = new ArrayList<>();

    public OperationQueryInfo(String opType) {
      this.opType = opType;
    }

    public String toString() {
      return opType + " " + items + (usesItems.isEmpty() ? "" : " USES " + usesItems);
    }
  }

////////////////////////////////////////////////////
// Grammar rules
////////////////////////////////////////////////////
  final public 
void QueryList() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      Query();
    }
    jj_consume_token(0);
}

  final public void Query() throws ParseException {
    if (jj_2_2(2)) {
      FlowQuery();
    } else if (jj_2_3(2)) {
      OperationQuery();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(QUESTION);
}

  final public void FlowQuery() throws ParseException {String fromType, fromValue, toType, toValue;
    jj_consume_token(FLOW);
    jj_consume_token(FROM);
    fromType = ElementType();
    jj_consume_token(LPAREN);
    fromValue = StringLiteral();
    jj_consume_token(RPAREN);
    jj_consume_token(TO);
    toType = ElementType();
    jj_consume_token(LPAREN);
    toValue = StringLiteral();
    jj_consume_token(RPAREN);
queries.add(new FlowQueryInfo(fromType, fromValue, toType, toValue));
}

  final public void OperationQuery() throws ParseException {Token op;
  OperationQueryInfo queryInfo;
  List<String> items;
  List<String> uses = new ArrayList<>();
    if (jj_2_4(2)) {
      op = jj_consume_token(KEEP_ACTIVITIES);
queryInfo = new OperationQueryInfo(op.image); items = StringListWrapper();
    } else if (jj_2_5(2)) {
      op = jj_consume_token(REMOVE_ACTIVITIES);
queryInfo = new OperationQueryInfo(op.image); items = StringListWrapper();
    } else if (jj_2_6(2)) {
      op = jj_consume_token(KEEP_PERMISSIONS);
queryInfo = new OperationQueryInfo(op.image); items = StringListWrapper();
    } else if (jj_2_7(2)) {
      op = jj_consume_token(KEEP_LIBRARIES);
queryInfo = new OperationQueryInfo(op.image); items = StringListWrapper();
    } else if (jj_2_8(2)) {
      op = jj_consume_token(KEEP_SOURCE);
queryInfo = new OperationQueryInfo(op.image);
                         items = new ArrayList<>();
                         items.add(SourceElementAsString());
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_9(2)) {
      jj_consume_token(USES);
      uses = StringListWrapper();
    } else {
      ;
    }
queryInfo.items.addAll(items);
    if (uses != null) queryInfo.usesItems.addAll(uses);
    queries.add(queryInfo);
}

  final public List<String> StringListWrapper() throws ParseException {List<String> list = new ArrayList<>();
    StringLiteralList(list);
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  final public void StringLiteralList(List<String> list) throws ParseException {String val;
    val = StringLiteral();
list.add(val);
    label_2:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      val = StringLiteral();
list.add(val);
    }
}

  final public String SourceElementAsString() throws ParseException {String type, value;
    type = ElementType();
    jj_consume_token(LPAREN);
    value = StringLiteral();
    jj_consume_token(RPAREN);
{if ("" != null) return type + "(" + value + ")";}
    throw new Error("Missing return statement in function");
}

  final public String ElementType() throws ParseException {Token t;
    if (jj_2_11(2)) {
      t = jj_consume_token(METHOD);
    } else if (jj_2_12(2)) {
      t = jj_consume_token(CLASS);
    } else if (jj_2_13(2)) {
      t = jj_consume_token(STATEMENT);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String StringLiteral() throws ParseException {Token t;
    t = jj_consume_token(STRING_LITERAL);
{if ("" != null) return t.image.substring(1, t.image.length() - 1);}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_3R_StringLiteral_184_3_7()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(KEEP_SOURCE)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(KEEP_LIBRARIES)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(KEEP_PERMISSIONS)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(REMOVE_ACTIVITIES)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(KEEP_ACTIVITIES)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(METHOD)) return true;
    return false;
  }

  private boolean jj_3R_OperationQuery_128_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_OperationQuery_128_3_5()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_StringLiteral_184_3_7()) return true;
    return false;
  }

  private boolean jj_3R_FlowQuery_113_3_4()
 {
    if (jj_scan_token(FLOW)) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(STATEMENT)) return true;
    return false;
  }

  private boolean jj_3R_StringLiteralList_158_3_8()
 {
    if (jj_3R_StringLiteral_184_3_7()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_FlowQuery_113_3_4()) return true;
    return false;
  }

  private boolean jj_3R_Query_105_3_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    if (jj_scan_token(QUESTION)) return true;
    return false;
  }

  private boolean jj_3R_StringListWrapper_150_3_6()
 {
    if (jj_3R_StringLiteralList_158_3_8()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_Query_105_3_3()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(USES)) return true;
    if (jj_3R_StringListWrapper_150_3_6()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ADQLParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[13];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ADQLParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ADQLParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ADQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ADQLParser(java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new ADQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ADQLParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ADQLParser(ADQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ADQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[27];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 27; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 13; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
